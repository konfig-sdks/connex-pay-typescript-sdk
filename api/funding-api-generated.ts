/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FundingMerchantCashBalance422Response } from '../models';
// @ts-ignore
import { FundingMerchantCashBalance500Response } from '../models';
// @ts-ignore
import { FundingMerchantCashBalanceRequest } from '../models';
// @ts-ignore
import { FundingMerchantCashBalanceResponse } from '../models';
// @ts-ignore
import { FundingTransferMerchantCashBalanceRequest } from '../models';
// @ts-ignore
import { FundingTransferMerchantCashBalanceResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FundingApi - axios parameter creator
 * @export
 */
export const FundingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this endpoint to fund or withdraw your merchant cash balance with your merchant bank account.
         * @summary Client Self-Service Funding
         * @param {FundingMerchantCashBalanceRequest} [fundingMerchantCashBalanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantCashBalance: async (fundingMerchantCashBalanceRequest?: FundingMerchantCashBalanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/MerchantSelfServiceFunding`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fundingMerchantCashBalanceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/MerchantSelfServiceFunding',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fundingMerchantCashBalanceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to transfer funds between your merchant cash balances within the same Corporate entity.
         * @summary Client Funds Transfer
         * @param {FundingTransferMerchantCashBalanceRequest} [fundingTransferMerchantCashBalanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMerchantCashBalance: async (fundingTransferMerchantCashBalanceRequest?: FundingTransferMerchantCashBalanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/MerchantFlexFunding/Funds/Transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fundingTransferMerchantCashBalanceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/MerchantFlexFunding/Funds/Transfer',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fundingTransferMerchantCashBalanceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FundingApi - functional programming interface
 * @export
 */
export const FundingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FundingApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this endpoint to fund or withdraw your merchant cash balance with your merchant bank account.
         * @summary Client Self-Service Funding
         * @param {FundingApiMerchantCashBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantCashBalance(requestParameters: FundingApiMerchantCashBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingMerchantCashBalanceResponse>> {
            const fundingMerchantCashBalanceRequest: FundingMerchantCashBalanceRequest = {
                merchantGUID: requestParameters.merchantGUID,
                amount: requestParameters.amount,
                isFundCashBalance: requestParameters.isFundCashBalance
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantCashBalance(fundingMerchantCashBalanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to transfer funds between your merchant cash balances within the same Corporate entity.
         * @summary Client Funds Transfer
         * @param {FundingApiTransferMerchantCashBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferMerchantCashBalance(requestParameters: FundingApiTransferMerchantCashBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingTransferMerchantCashBalanceResponse>> {
            const fundingTransferMerchantCashBalanceRequest: FundingTransferMerchantCashBalanceRequest = {
                TransferredFrom: requestParameters.TransferredFrom,
                TransferredTo: requestParameters.TransferredTo,
                Amount: requestParameters.Amount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferMerchantCashBalance(fundingTransferMerchantCashBalanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FundingApi - factory interface
 * @export
 */
export const FundingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FundingApiFp(configuration)
    return {
        /**
         * Use this endpoint to fund or withdraw your merchant cash balance with your merchant bank account.
         * @summary Client Self-Service Funding
         * @param {FundingApiMerchantCashBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantCashBalance(requestParameters: FundingApiMerchantCashBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<FundingMerchantCashBalanceResponse> {
            return localVarFp.merchantCashBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to transfer funds between your merchant cash balances within the same Corporate entity.
         * @summary Client Funds Transfer
         * @param {FundingApiTransferMerchantCashBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMerchantCashBalance(requestParameters: FundingApiTransferMerchantCashBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<FundingTransferMerchantCashBalanceResponse> {
            return localVarFp.transferMerchantCashBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for merchantCashBalance operation in FundingApi.
 * @export
 * @interface FundingApiMerchantCashBalanceRequest
 */
export type FundingApiMerchantCashBalanceRequest = {
    
} & FundingMerchantCashBalanceRequest

/**
 * Request parameters for transferMerchantCashBalance operation in FundingApi.
 * @export
 * @interface FundingApiTransferMerchantCashBalanceRequest
 */
export type FundingApiTransferMerchantCashBalanceRequest = {
    
} & FundingTransferMerchantCashBalanceRequest

/**
 * FundingApiGenerated - object-oriented interface
 * @export
 * @class FundingApiGenerated
 * @extends {BaseAPI}
 */
export class FundingApiGenerated extends BaseAPI {
    /**
     * Use this endpoint to fund or withdraw your merchant cash balance with your merchant bank account.
     * @summary Client Self-Service Funding
     * @param {FundingApiMerchantCashBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingApiGenerated
     */
    public merchantCashBalance(requestParameters: FundingApiMerchantCashBalanceRequest, options?: AxiosRequestConfig) {
        return FundingApiFp(this.configuration).merchantCashBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to transfer funds between your merchant cash balances within the same Corporate entity.
     * @summary Client Funds Transfer
     * @param {FundingApiTransferMerchantCashBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingApiGenerated
     */
    public transferMerchantCashBalance(requestParameters: FundingApiTransferMerchantCashBalanceRequest, options?: AxiosRequestConfig) {
        return FundingApiFp(this.configuration).transferMerchantCashBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
