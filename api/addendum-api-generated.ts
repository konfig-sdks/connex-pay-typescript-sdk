/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddendumCreateAchPurchaseRequest } from '../models';
// @ts-ignore
import { AddendumCreateAchPurchaseResponse } from '../models';
// @ts-ignore
import { AddendumCreateVirtualCardRequest } from '../models';
// @ts-ignore
import { AddendumCreateVirtualCardResponse } from '../models';
// @ts-ignore
import { AddendumDeleteItemResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AddendumApi - axios parameter creator
 * @export
 */
export const AddendumApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ACH Purchase Addendum
         * @param {AddendumCreateAchPurchaseRequest} [addendumCreateAchPurchaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAchPurchase: async (addendumCreateAchPurchaseRequest?: AddendumCreateAchPurchaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Addendum/ACH`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addendumCreateAchPurchaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Addendum/ACH',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addendumCreateAchPurchaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Virtual Card Addendum
         * @param {AddendumCreateVirtualCardRequest} [addendumCreateVirtualCardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualCard: async (addendumCreateVirtualCardRequest?: AddendumCreateVirtualCardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Addendum/VirtualCard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addendumCreateVirtualCardRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Addendum/VirtualCard',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addendumCreateVirtualCardRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes an Addendum information item from an object.
         * @summary Addendum Remove
         * @param {string} guid The Addendum guid to terminate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: async (guid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('deleteItem', 'guid', guid)
            const localVarPath = `/v1/Addendum/Remove/<guid>`
                .replace(`{${"Guid"}}`, encodeURIComponent(String(guid !== undefined ? guid : `-Guid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/Addendum/Remove/<guid>',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddendumApi - functional programming interface
 * @export
 */
export const AddendumApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddendumApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ACH Purchase Addendum
         * @param {AddendumApiCreateAchPurchaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAchPurchase(requestParameters: AddendumApiCreateAchPurchaseRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddendumCreateAchPurchaseResponse>> {
            const addendumCreateAchPurchaseRequest: AddendumCreateAchPurchaseRequest = {
                ItemGuid: requestParameters.ItemGuid,
                Value: requestParameters.Value,
                Category: requestParameters.Category,
                IdExternal: requestParameters.IdExternal,
                Note: requestParameters.Note,
                Sequence: requestParameters.Sequence
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAchPurchase(addendumCreateAchPurchaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Virtual Card Addendum
         * @param {AddendumApiCreateVirtualCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVirtualCard(requestParameters: AddendumApiCreateVirtualCardRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddendumCreateVirtualCardResponse>> {
            const addendumCreateVirtualCardRequest: AddendumCreateVirtualCardRequest = {
                ItemGuid: requestParameters.ItemGuid,
                Value: requestParameters.Value,
                Category: requestParameters.Category,
                IdExternal: requestParameters.IdExternal,
                Note: requestParameters.Note,
                Sequence: requestParameters.Sequence
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVirtualCard(addendumCreateVirtualCardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint deletes an Addendum information item from an object.
         * @summary Addendum Remove
         * @param {AddendumApiDeleteItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteItem(requestParameters: AddendumApiDeleteItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddendumDeleteItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItem(requestParameters.guid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddendumApi - factory interface
 * @export
 */
export const AddendumApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddendumApiFp(configuration)
    return {
        /**
         * 
         * @summary ACH Purchase Addendum
         * @param {AddendumApiCreateAchPurchaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAchPurchase(requestParameters: AddendumApiCreateAchPurchaseRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AddendumCreateAchPurchaseResponse> {
            return localVarFp.createAchPurchase(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Virtual Card Addendum
         * @param {AddendumApiCreateVirtualCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualCard(requestParameters: AddendumApiCreateVirtualCardRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AddendumCreateVirtualCardResponse> {
            return localVarFp.createVirtualCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes an Addendum information item from an object.
         * @summary Addendum Remove
         * @param {AddendumApiDeleteItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem(requestParameters: AddendumApiDeleteItemRequest, options?: AxiosRequestConfig): AxiosPromise<AddendumDeleteItemResponse> {
            return localVarFp.deleteItem(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAchPurchase operation in AddendumApi.
 * @export
 * @interface AddendumApiCreateAchPurchaseRequest
 */
export type AddendumApiCreateAchPurchaseRequest = {
    
} & AddendumCreateAchPurchaseRequest

/**
 * Request parameters for createVirtualCard operation in AddendumApi.
 * @export
 * @interface AddendumApiCreateVirtualCardRequest
 */
export type AddendumApiCreateVirtualCardRequest = {
    
} & AddendumCreateVirtualCardRequest

/**
 * Request parameters for deleteItem operation in AddendumApi.
 * @export
 * @interface AddendumApiDeleteItemRequest
 */
export type AddendumApiDeleteItemRequest = {
    
    /**
    * The Addendum guid to terminate.
    * @type {string}
    * @memberof AddendumApiDeleteItem
    */
    readonly guid: string
    
}

/**
 * AddendumApiGenerated - object-oriented interface
 * @export
 * @class AddendumApiGenerated
 * @extends {BaseAPI}
 */
export class AddendumApiGenerated extends BaseAPI {
    /**
     * 
     * @summary ACH Purchase Addendum
     * @param {AddendumApiCreateAchPurchaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddendumApiGenerated
     */
    public createAchPurchase(requestParameters: AddendumApiCreateAchPurchaseRequest = {}, options?: AxiosRequestConfig) {
        return AddendumApiFp(this.configuration).createAchPurchase(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Virtual Card Addendum
     * @param {AddendumApiCreateVirtualCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddendumApiGenerated
     */
    public createVirtualCard(requestParameters: AddendumApiCreateVirtualCardRequest = {}, options?: AxiosRequestConfig) {
        return AddendumApiFp(this.configuration).createVirtualCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint deletes an Addendum information item from an object.
     * @summary Addendum Remove
     * @param {AddendumApiDeleteItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddendumApiGenerated
     */
    public deleteItem(requestParameters: AddendumApiDeleteItemRequest, options?: AxiosRequestConfig) {
        return AddendumApiFp(this.configuration).deleteItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
