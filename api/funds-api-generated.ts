/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FundsApi - axios parameter creator
 * @export
 */
export const FundsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this endpoint to pull details regarding your Available Funds like cash balance, Available to Authorize (ATA) or Available to Issue (ATI), and the details that make up the final number.
         * @summary Available Funds
         * @param {string} merchantGuid Merchant\&#39;s Guid assigned by ConnexPay
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableDetails: async (merchantGuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantGuid' is not null or undefined
            assertParamExists('getAvailableDetails', 'merchantGuid', merchantGuid)
            const localVarPath = `/api/v1/Search/AvailableFunds/{merchantGuid}`
                .replace(`{${"MerchantGuid"}}`, encodeURIComponent(String(merchantGuid !== undefined ? merchantGuid : `-MerchantGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Search/AvailableFunds/{merchantGuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FundsApi - functional programming interface
 * @export
 */
export const FundsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FundsApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this endpoint to pull details regarding your Available Funds like cash balance, Available to Authorize (ATA) or Available to Issue (ATI), and the details that make up the final number.
         * @summary Available Funds
         * @param {FundsApiGetAvailableDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableDetails(requestParameters: FundsApiGetAvailableDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableDetails(requestParameters.merchantGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FundsApi - factory interface
 * @export
 */
export const FundsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FundsApiFp(configuration)
    return {
        /**
         * Use this endpoint to pull details regarding your Available Funds like cash balance, Available to Authorize (ATA) or Available to Issue (ATI), and the details that make up the final number.
         * @summary Available Funds
         * @param {FundsApiGetAvailableDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableDetails(requestParameters: FundsApiGetAvailableDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getAvailableDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAvailableDetails operation in FundsApi.
 * @export
 * @interface FundsApiGetAvailableDetailsRequest
 */
export type FundsApiGetAvailableDetailsRequest = {
    
    /**
    * Merchant\'s Guid assigned by ConnexPay
    * @type {string}
    * @memberof FundsApiGetAvailableDetails
    */
    readonly merchantGuid: string
    
}

/**
 * FundsApiGenerated - object-oriented interface
 * @export
 * @class FundsApiGenerated
 * @extends {BaseAPI}
 */
export class FundsApiGenerated extends BaseAPI {
    /**
     * Use this endpoint to pull details regarding your Available Funds like cash balance, Available to Authorize (ATA) or Available to Issue (ATI), and the details that make up the final number.
     * @summary Available Funds
     * @param {FundsApiGetAvailableDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundsApiGenerated
     */
    public getAvailableDetails(requestParameters: FundsApiGetAvailableDetailsRequest, options?: AxiosRequestConfig) {
        return FundsApiFp(this.configuration).getAvailableDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
