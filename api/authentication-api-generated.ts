/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationAcquireClientAuthorization202Response } from '../models';
// @ts-ignore
import { AuthenticationAcquireClientAuthorizationRequest } from '../models';
// @ts-ignore
import { AuthenticationAcquireClientAuthorizationRequestBankAccount } from '../models';
// @ts-ignore
import { AuthenticationAcquireClientAuthorizationRequestBrowserData } from '../models';
// @ts-ignore
import { AuthenticationAcquireClientAuthorizationRequestCard } from '../models';
// @ts-ignore
import { AuthenticationAcquireClientAuthorizationRequestRiskData } from '../models';
// @ts-ignore
import { AuthenticationAcquireClientAuthorizationResponse } from '../models';
// @ts-ignore
import { AuthenticationObtain3DSecureAuthentication202Response } from '../models';
// @ts-ignore
import { AuthenticationObtain3DSecureAuthenticationRequest } from '../models';
// @ts-ignore
import { AuthenticationObtain3DSecureAuthenticationRequestBrowserData } from '../models';
// @ts-ignore
import { AuthenticationObtain3DSecureAuthenticationRequestCard } from '../models';
// @ts-ignore
import { AuthenticationObtain3DSecureAuthenticationResponse } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequestCustomer } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequestEnhancedData } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Auth Only Endpoint is applicable to acquiring clients.  Call Auth Only when you want to process an Authorization only, which will not settle until it\'s Captured.  We do not allow you to Capture an Authorization after 5 business days have passed.Calling this endpoint will authorize the card, however, it will not be settled until the [Capture endpoint](https://docs.connexpay.com/reference/capture) is called. Authorizations expire after 5 days.
         * @summary Auth Only
         * @param {AuthenticationAcquireClientAuthorizationRequest} [authenticationAcquireClientAuthorizationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquireClientAuthorization: async (authenticationAcquireClientAuthorizationRequest?: AuthenticationAcquireClientAuthorizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/authonlys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authenticationAcquireClientAuthorizationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/authonlys',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationAcquireClientAuthorizationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can be used for obtaining 3D Secure Authentication separate from the Create Sale or Auth-Only calls.  This is recommended for our US and CA clients.
         * @summary 3DS Authentication
         * @param {AuthenticationObtain3DSecureAuthenticationRequest} [authenticationObtain3DSecureAuthenticationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtain3dSecureAuthentication: async (authenticationObtain3DSecureAuthenticationRequest?: AuthenticationObtain3DSecureAuthenticationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/3ds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authenticationObtain3DSecureAuthenticationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/3ds',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationObtain3DSecureAuthenticationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * The Auth Only Endpoint is applicable to acquiring clients.  Call Auth Only when you want to process an Authorization only, which will not settle until it\'s Captured.  We do not allow you to Capture an Authorization after 5 business days have passed.Calling this endpoint will authorize the card, however, it will not be settled until the [Capture endpoint](https://docs.connexpay.com/reference/capture) is called. Authorizations expire after 5 days.
         * @summary Auth Only
         * @param {AuthenticationApiAcquireClientAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acquireClientAuthorization(requestParameters: AuthenticationApiAcquireClientAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationAcquireClientAuthorizationResponse>> {
            const authenticationAcquireClientAuthorizationRequest: AuthenticationAcquireClientAuthorizationRequest = {
                DeviceGuid: requestParameters.DeviceGuid,
                Amount: requestParameters.Amount,
                SequenceNumber: requestParameters.SequenceNumber,
                OrderNumber: requestParameters.OrderNumber,
                SendReceipt: requestParameters.SendReceipt,
                StatementDescription: requestParameters.StatementDescription,
                CustomerID: requestParameters.CustomerID,
                RiskData: requestParameters.RiskData,
                Card: requestParameters.Card,
                BankAccount: requestParameters.BankAccount,
                Customer: requestParameters.Customer,
                EnhancedData: requestParameters.EnhancedData,
                AssociationID: requestParameters.AssociationID,
                BrowserData: requestParameters.BrowserData
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.acquireClientAuthorization(authenticationAcquireClientAuthorizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint can be used for obtaining 3D Secure Authentication separate from the Create Sale or Auth-Only calls.  This is recommended for our US and CA clients.
         * @summary 3DS Authentication
         * @param {AuthenticationApiObtain3dSecureAuthenticationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async obtain3dSecureAuthentication(requestParameters: AuthenticationApiObtain3dSecureAuthenticationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationObtain3DSecureAuthenticationResponse>> {
            const authenticationObtain3DSecureAuthenticationRequest: AuthenticationObtain3DSecureAuthenticationRequest = {
                Card: requestParameters.Card,
                DeviceGuid: requestParameters.DeviceGuid,
                BrowserData: requestParameters.BrowserData,
                Amount: requestParameters.Amount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.obtain3dSecureAuthentication(authenticationObtain3DSecureAuthenticationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * The Auth Only Endpoint is applicable to acquiring clients.  Call Auth Only when you want to process an Authorization only, which will not settle until it\'s Captured.  We do not allow you to Capture an Authorization after 5 business days have passed.Calling this endpoint will authorize the card, however, it will not be settled until the [Capture endpoint](https://docs.connexpay.com/reference/capture) is called. Authorizations expire after 5 days.
         * @summary Auth Only
         * @param {AuthenticationApiAcquireClientAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acquireClientAuthorization(requestParameters: AuthenticationApiAcquireClientAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<AuthenticationAcquireClientAuthorizationResponse> {
            return localVarFp.acquireClientAuthorization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used for obtaining 3D Secure Authentication separate from the Create Sale or Auth-Only calls.  This is recommended for our US and CA clients.
         * @summary 3DS Authentication
         * @param {AuthenticationApiObtain3dSecureAuthenticationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtain3dSecureAuthentication(requestParameters: AuthenticationApiObtain3dSecureAuthenticationRequest, options?: AxiosRequestConfig): AxiosPromise<AuthenticationObtain3DSecureAuthenticationResponse> {
            return localVarFp.obtain3dSecureAuthentication(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acquireClientAuthorization operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAcquireClientAuthorizationRequest
 */
export type AuthenticationApiAcquireClientAuthorizationRequest = {
    
} & AuthenticationAcquireClientAuthorizationRequest

/**
 * Request parameters for obtain3dSecureAuthentication operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiObtain3dSecureAuthenticationRequest
 */
export type AuthenticationApiObtain3dSecureAuthenticationRequest = {
    
} & AuthenticationObtain3DSecureAuthenticationRequest

/**
 * AuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationApiGenerated
 * @extends {BaseAPI}
 */
export class AuthenticationApiGenerated extends BaseAPI {
    /**
     * The Auth Only Endpoint is applicable to acquiring clients.  Call Auth Only when you want to process an Authorization only, which will not settle until it\'s Captured.  We do not allow you to Capture an Authorization after 5 business days have passed.Calling this endpoint will authorize the card, however, it will not be settled until the [Capture endpoint](https://docs.connexpay.com/reference/capture) is called. Authorizations expire after 5 days.
     * @summary Auth Only
     * @param {AuthenticationApiAcquireClientAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public acquireClientAuthorization(requestParameters: AuthenticationApiAcquireClientAuthorizationRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).acquireClientAuthorization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint can be used for obtaining 3D Secure Authentication separate from the Create Sale or Auth-Only calls.  This is recommended for our US and CA clients.
     * @summary 3DS Authentication
     * @param {AuthenticationApiObtain3dSecureAuthenticationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public obtain3dSecureAuthentication(requestParameters: AuthenticationApiObtain3dSecureAuthenticationRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).obtain3dSecureAuthentication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
