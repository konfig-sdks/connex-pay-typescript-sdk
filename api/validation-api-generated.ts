/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ValidationSearchVerifyOperationRequest } from '../models';
// @ts-ignore
import { ValidationSearchVerifyOperationResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ValidationApi - axios parameter creator
 * @export
 */
export const ValidationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint search a verify.
         * @summary Search verify
         * @param {string} exportable True or False. It means if you want results exportable to CSV.
         * @param {number} pageNumber Int. Number of page of the results. Default is 1 (Page size default is 500).
         * @param {string} pageSize Int. Size of each page of the results. Default is 500.
         * @param {ValidationSearchVerifyOperationRequest} [validationSearchVerifyOperationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVerifyOperation: async (exportable: string, pageNumber: number, pageSize: string, validationSearchVerifyOperationRequest?: ValidationSearchVerifyOperationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportable' is not null or undefined
            assertParamExists('searchVerifyOperation', 'exportable', exportable)
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('searchVerifyOperation', 'pageNumber', pageNumber)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('searchVerifyOperation', 'pageSize', pageSize)
            const localVarPath = `/api/v1/Search/Verify/{exportable}/{pageNumber}/{pageSize}`
                .replace(`{${"Exportable"}}`, encodeURIComponent(String(exportable !== undefined ? exportable : `-Exportable-`)))
                .replace(`{${"PageNumber"}}`, encodeURIComponent(String(pageNumber !== undefined ? pageNumber : `-PageNumber-`)))
                .replace(`{${"PageSize"}}`, encodeURIComponent(String(pageSize !== undefined ? pageSize : `-PageSize-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: validationSearchVerifyOperationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Search/Verify/{exportable}/{pageNumber}/{pageSize}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(validationSearchVerifyOperationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValidationApi - functional programming interface
 * @export
 */
export const ValidationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ValidationApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint search a verify.
         * @summary Search verify
         * @param {ValidationApiSearchVerifyOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVerifyOperation(requestParameters: ValidationApiSearchVerifyOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidationSearchVerifyOperationResponse>> {
            const validationSearchVerifyOperationRequest: ValidationSearchVerifyOperationRequest = {
                MerchantGuid: requestParameters.MerchantGuid,
                CardLastFour: requestParameters.CardLastFour,
                CardHolderName: requestParameters.CardHolderName,
                CardType: requestParameters.CardType,
                TimeStampFrom: requestParameters.TimeStampFrom,
                TimeStampTo: requestParameters.TimeStampTo,
                Status: requestParameters.Status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchVerifyOperation(requestParameters.exportable, requestParameters.pageNumber, requestParameters.pageSize, validationSearchVerifyOperationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ValidationApi - factory interface
 * @export
 */
export const ValidationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ValidationApiFp(configuration)
    return {
        /**
         * This endpoint search a verify.
         * @summary Search verify
         * @param {ValidationApiSearchVerifyOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVerifyOperation(requestParameters: ValidationApiSearchVerifyOperationRequest, options?: AxiosRequestConfig): AxiosPromise<ValidationSearchVerifyOperationResponse> {
            return localVarFp.searchVerifyOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for searchVerifyOperation operation in ValidationApi.
 * @export
 * @interface ValidationApiSearchVerifyOperationRequest
 */
export type ValidationApiSearchVerifyOperationRequest = {
    
    /**
    * True or False. It means if you want results exportable to CSV.
    * @type {string}
    * @memberof ValidationApiSearchVerifyOperation
    */
    readonly exportable: string
    
    /**
    * Int. Number of page of the results. Default is 1 (Page size default is 500).
    * @type {number}
    * @memberof ValidationApiSearchVerifyOperation
    */
    readonly pageNumber: number
    
    /**
    * Int. Size of each page of the results. Default is 500.
    * @type {string}
    * @memberof ValidationApiSearchVerifyOperation
    */
    readonly pageSize: string
    
} & ValidationSearchVerifyOperationRequest

/**
 * ValidationApiGenerated - object-oriented interface
 * @export
 * @class ValidationApiGenerated
 * @extends {BaseAPI}
 */
export class ValidationApiGenerated extends BaseAPI {
    /**
     * This endpoint search a verify.
     * @summary Search verify
     * @param {ValidationApiSearchVerifyOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValidationApiGenerated
     */
    public searchVerifyOperation(requestParameters: ValidationApiSearchVerifyOperationRequest, options?: AxiosRequestConfig) {
        return ValidationApiFp(this.configuration).searchVerifyOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
