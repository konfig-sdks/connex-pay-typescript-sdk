/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CancelPaymentsDto } from '../models';
// @ts-ignore
import { DtoPayout } from '../models';
// @ts-ignore
import { PayeeDto } from '../models';
// @ts-ignore
import { PaymentsDto } from '../models';
// @ts-ignore
import { PayoutAuthResponse } from '../models';
// @ts-ignore
import { PayoutDto } from '../models';
// @ts-ignore
import { UpdatePayeeDto } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PushToCardApi - axios parameter creator
 * @export
 */
export const PushToCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this endpoint to cancel payments within a Payout.
         * @summary Cancel Payments
         * @param {string} payoutGuid Globally Unique Identifier for a the Payout that will be changed
         * @param {CancelPaymentsDto} cancelPaymentsDto Indicator of which payments to cancel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayments: async (payoutGuid: string, cancelPaymentsDto: CancelPaymentsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payoutGuid' is not null or undefined
            assertParamExists('cancelPayments', 'payoutGuid', payoutGuid)
            // verify required parameter 'cancelPaymentsDto' is not null or undefined
            assertParamExists('cancelPayments', 'cancelPaymentsDto', cancelPaymentsDto)
            const localVarPath = `/api/v1/PushToCard/Payouts/{payoutGuid}/Cancel`
                .replace(`{${"payoutGuid"}}`, encodeURIComponent(String(payoutGuid !== undefined ? payoutGuid : `-payoutGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cancelPaymentsDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/PushToCard/Payouts/{payoutGuid}/Cancel',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cancelPaymentsDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a new Payee.
         * @summary Create Payee
         * @param {PayeeDto} payeeDto The data for the Payee that will be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayee: async (payeeDto: PayeeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payeeDto' is not null or undefined
            assertParamExists('createPayee', 'payeeDto', payeeDto)
            const localVarPath = `/api/v1/PushToCard/Payees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payeeDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/PushToCard/Payees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payeeDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a new Payout.
         * @summary Create Payout
         * @param {PayoutDto} payoutDto The data for the Payout being created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayout: async (payoutDto: PayoutDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payoutDto' is not null or undefined
            assertParamExists('createPayout', 'payoutDto', payoutDto)
            const localVarPath = `/api/v1/PushToCard/Payouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payoutDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/PushToCard/Payouts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payoutDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Authentication Token for DropInUI
         * @param {string} [payeeGuid] Globally Unique Identifier for the Payee being authenticated.
         * @param {string} [payeeEmailAddress] Email address of the Payee being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticationTokenAsync: async (payeeGuid?: string, payeeEmailAddress?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/PushToCard/AuthenticatePaymentWidget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (payeeGuid !== undefined) {
                localVarQueryParameter['payeeGuid'] = payeeGuid;
            }

            if (payeeEmailAddress !== undefined) {
                localVarQueryParameter['payeeEmailAddress'] = payeeEmailAddress;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/PushToCard/AuthenticatePaymentWidget',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to retrieve a Payee for a specific Payee guid. One or both \'payeeGuid\' or \'payeeEmailAddress\' must be provided.
         * @summary Get Payee
         * @param {string} [payeeGuid] Globally Unique Identifier for the Payee being retrieved
         * @param {string} [payeeEmailAddress] Email address of the Payee being retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayee: async (payeeGuid?: string, payeeEmailAddress?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/PushToCard/Payees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (payeeGuid !== undefined) {
                localVarQueryParameter['payeeGuid'] = payeeGuid;
            }

            if (payeeEmailAddress !== undefined) {
                localVarQueryParameter['payeeEmailAddress'] = payeeEmailAddress;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/PushToCard/Payees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to retrieve the details for a Payout for a specific Payout guid.
         * @summary Get Payout Details
         * @param {string} payoutGuid Globally Unique Identifier for a the Payout that will be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutDetails: async (payoutGuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payoutGuid' is not null or undefined
            assertParamExists('getPayoutDetails', 'payoutGuid', payoutGuid)
            const localVarPath = `/api/v1/PushToCard/Payouts/{payoutGuid}`
                .replace(`{${"payoutGuid"}}`, encodeURIComponent(String(payoutGuid !== undefined ? payoutGuid : `-payoutGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/PushToCard/Payouts/{payoutGuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to enable or disable a Payee.
         * @summary Manage Payee
         * @param {string} payeeGuid Globally Unique Identifier for the Payee that will be changed
         * @param {'enable' | 'disable'} status Must be \&#39;enable\&#39; or \&#39;disable\&#39;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managePayee: async (payeeGuid: string, status: 'enable' | 'disable', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payeeGuid' is not null or undefined
            assertParamExists('managePayee', 'payeeGuid', payeeGuid)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('managePayee', 'status', status)
            const localVarPath = `/api/v1/PushToCard/Payees/{payeeGuid}/{status}`
                .replace(`{${"payeeGuid"}}`, encodeURIComponent(String(payeeGuid !== undefined ? payeeGuid : `-payeeGuid-`)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status !== undefined ? status : `-status-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/PushToCard/Payees/{payeeGuid}/{status}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Push Funds to a Card
         * @param {string} ridGuid For Payment Widget clients. A ridGuid will will be returned upon creation of a Payout. That must be saved and passed here to complete the process.
         * @param {string} cardId For Payment Widget clients. The cardId is retrieved by calling the Get Payee endpoint.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushFundsToCardAsync: async (ridGuid: string, cardId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ridGuid' is not null or undefined
            assertParamExists('pushFundsToCardAsync', 'ridGuid', ridGuid)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('pushFundsToCardAsync', 'cardId', cardId)
            const localVarPath = `/api/v1/PushToCard/Payments/{ridGuid}/{cardId}`
                .replace(`{${"ridGuid"}}`, encodeURIComponent(String(ridGuid !== undefined ? ridGuid : `-ridGuid-`)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId !== undefined ? cardId : `-cardId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/PushToCard/Payments/{ridGuid}/{cardId}',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update data for a Payee.
         * @summary Update Payee
         * @param {string} payeeGuid Globally Unique Identifier for a the Payee that will be updated
         * @param {UpdatePayeeDto} updatePayeeDto The data for the Payee that will be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayee: async (payeeGuid: string, updatePayeeDto: UpdatePayeeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payeeGuid' is not null or undefined
            assertParamExists('updatePayee', 'payeeGuid', payeeGuid)
            // verify required parameter 'updatePayeeDto' is not null or undefined
            assertParamExists('updatePayee', 'updatePayeeDto', updatePayeeDto)
            const localVarPath = `/api/v1/PushToCard/Payees/{payeeGuid}`
                .replace(`{${"payeeGuid"}}`, encodeURIComponent(String(payeeGuid !== undefined ? payeeGuid : `-payeeGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updatePayeeDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/PushToCard/Payees/{payeeGuid}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updatePayeeDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PushToCardApi - functional programming interface
 * @export
 */
export const PushToCardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PushToCardApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this endpoint to cancel payments within a Payout.
         * @summary Cancel Payments
         * @param {PushToCardApiCancelPaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelPayments(requestParameters: PushToCardApiCancelPaymentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const cancelPaymentsDto: CancelPaymentsDto = {
                merchantGuid: requestParameters.merchantGuid,
                payments: requestParameters.payments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelPayments(requestParameters.payoutGuid, cancelPaymentsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a new Payee.
         * @summary Create Payee
         * @param {PushToCardApiCreatePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayee(requestParameters: PushToCardApiCreatePayeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayeeDto>> {
            const payeeDto: PayeeDto = {
                payeeGuid: requestParameters.payeeGuid,
                merchantGuid: requestParameters.merchantGuid,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                email: requestParameters.email,
                address1: requestParameters.address1,
                address2: requestParameters.address2,
                city: requestParameters.city,
                state: requestParameters.state,
                zipCode: requestParameters.zipCode,
                phone: requestParameters.phone,
                status: requestParameters.status,
                cardId: requestParameters.cardId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayee(payeeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a new Payout.
         * @summary Create Payout
         * @param {PushToCardApiCreatePayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayout(requestParameters: PushToCardApiCreatePayoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutDto>> {
            const payoutDto: PayoutDto = {
                payoutGuid: requestParameters.payoutGuid,
                merchantGuid: requestParameters.merchantGuid,
                payoutReferenceToken: requestParameters.payoutReferenceToken,
                memo: requestParameters.memo,
                status: requestParameters.status,
                payments: requestParameters.payments,
                orderNumber: requestParameters.orderNumber,
                customerId: requestParameters.customerId,
                associationId: requestParameters.associationId,
                labelIds: requestParameters.labelIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayout(payoutDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Authentication Token for DropInUI
         * @param {PushToCardApiGetAuthenticationTokenAsyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticationTokenAsync(requestParameters: PushToCardApiGetAuthenticationTokenAsyncRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticationTokenAsync(requestParameters.payeeGuid, requestParameters.payeeEmailAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to retrieve a Payee for a specific Payee guid. One or both \'payeeGuid\' or \'payeeEmailAddress\' must be provided.
         * @summary Get Payee
         * @param {PushToCardApiGetPayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayee(requestParameters: PushToCardApiGetPayeeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayeeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayee(requestParameters.payeeGuid, requestParameters.payeeEmailAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to retrieve the details for a Payout for a specific Payout guid.
         * @summary Get Payout Details
         * @param {PushToCardApiGetPayoutDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayoutDetails(requestParameters: PushToCardApiGetPayoutDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DtoPayout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayoutDetails(requestParameters.payoutGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to enable or disable a Payee.
         * @summary Manage Payee
         * @param {PushToCardApiManagePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async managePayee(requestParameters: PushToCardApiManagePayeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.managePayee(requestParameters.payeeGuid, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Push Funds to a Card
         * @param {PushToCardApiPushFundsToCardAsyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pushFundsToCardAsync(requestParameters: PushToCardApiPushFundsToCardAsyncRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pushFundsToCardAsync(requestParameters.ridGuid, requestParameters.cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update data for a Payee.
         * @summary Update Payee
         * @param {PushToCardApiUpdatePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayee(requestParameters: PushToCardApiUpdatePayeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const updatePayeeDto: UpdatePayeeDto = {
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                email: requestParameters.email,
                address1: requestParameters.address1,
                address2: requestParameters.address2,
                city: requestParameters.city,
                state: requestParameters.state,
                zipCode: requestParameters.zipCode,
                phone: requestParameters.phone,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayee(requestParameters.payeeGuid, updatePayeeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PushToCardApi - factory interface
 * @export
 */
export const PushToCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PushToCardApiFp(configuration)
    return {
        /**
         * Use this endpoint to cancel payments within a Payout.
         * @summary Cancel Payments
         * @param {PushToCardApiCancelPaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayments(requestParameters: PushToCardApiCancelPaymentsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.cancelPayments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a new Payee.
         * @summary Create Payee
         * @param {PushToCardApiCreatePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayee(requestParameters: PushToCardApiCreatePayeeRequest, options?: AxiosRequestConfig): AxiosPromise<PayeeDto> {
            return localVarFp.createPayee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a new Payout.
         * @summary Create Payout
         * @param {PushToCardApiCreatePayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayout(requestParameters: PushToCardApiCreatePayoutRequest, options?: AxiosRequestConfig): AxiosPromise<PayoutDto> {
            return localVarFp.createPayout(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Authentication Token for DropInUI
         * @param {PushToCardApiGetAuthenticationTokenAsyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticationTokenAsync(requestParameters: PushToCardApiGetAuthenticationTokenAsyncRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PayoutAuthResponse> {
            return localVarFp.getAuthenticationTokenAsync(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to retrieve a Payee for a specific Payee guid. One or both \'payeeGuid\' or \'payeeEmailAddress\' must be provided.
         * @summary Get Payee
         * @param {PushToCardApiGetPayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayee(requestParameters: PushToCardApiGetPayeeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PayeeDto> {
            return localVarFp.getPayee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to retrieve the details for a Payout for a specific Payout guid.
         * @summary Get Payout Details
         * @param {PushToCardApiGetPayoutDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutDetails(requestParameters: PushToCardApiGetPayoutDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<DtoPayout> {
            return localVarFp.getPayoutDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to enable or disable a Payee.
         * @summary Manage Payee
         * @param {PushToCardApiManagePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        managePayee(requestParameters: PushToCardApiManagePayeeRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.managePayee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Push Funds to a Card
         * @param {PushToCardApiPushFundsToCardAsyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushFundsToCardAsync(requestParameters: PushToCardApiPushFundsToCardAsyncRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.pushFundsToCardAsync(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update data for a Payee.
         * @summary Update Payee
         * @param {PushToCardApiUpdatePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayee(requestParameters: PushToCardApiUpdatePayeeRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updatePayee(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelPayments operation in PushToCardApi.
 * @export
 * @interface PushToCardApiCancelPaymentsRequest
 */
export type PushToCardApiCancelPaymentsRequest = {
    
    /**
    * Globally Unique Identifier for a the Payout that will be changed
    * @type {string}
    * @memberof PushToCardApiCancelPayments
    */
    readonly payoutGuid: string
    
} & CancelPaymentsDto

/**
 * Request parameters for createPayee operation in PushToCardApi.
 * @export
 * @interface PushToCardApiCreatePayeeRequest
 */
export type PushToCardApiCreatePayeeRequest = {
    
} & PayeeDto

/**
 * Request parameters for createPayout operation in PushToCardApi.
 * @export
 * @interface PushToCardApiCreatePayoutRequest
 */
export type PushToCardApiCreatePayoutRequest = {
    
} & PayoutDto

/**
 * Request parameters for getAuthenticationTokenAsync operation in PushToCardApi.
 * @export
 * @interface PushToCardApiGetAuthenticationTokenAsyncRequest
 */
export type PushToCardApiGetAuthenticationTokenAsyncRequest = {
    
    /**
    * Globally Unique Identifier for the Payee being authenticated.
    * @type {string}
    * @memberof PushToCardApiGetAuthenticationTokenAsync
    */
    readonly payeeGuid?: string
    
    /**
    * Email address of the Payee being retrieved
    * @type {string}
    * @memberof PushToCardApiGetAuthenticationTokenAsync
    */
    readonly payeeEmailAddress?: string
    
}

/**
 * Request parameters for getPayee operation in PushToCardApi.
 * @export
 * @interface PushToCardApiGetPayeeRequest
 */
export type PushToCardApiGetPayeeRequest = {
    
    /**
    * Globally Unique Identifier for the Payee being retrieved
    * @type {string}
    * @memberof PushToCardApiGetPayee
    */
    readonly payeeGuid?: string
    
    /**
    * Email address of the Payee being retrieved
    * @type {string}
    * @memberof PushToCardApiGetPayee
    */
    readonly payeeEmailAddress?: string
    
}

/**
 * Request parameters for getPayoutDetails operation in PushToCardApi.
 * @export
 * @interface PushToCardApiGetPayoutDetailsRequest
 */
export type PushToCardApiGetPayoutDetailsRequest = {
    
    /**
    * Globally Unique Identifier for a the Payout that will be retrieved
    * @type {string}
    * @memberof PushToCardApiGetPayoutDetails
    */
    readonly payoutGuid: string
    
}

/**
 * Request parameters for managePayee operation in PushToCardApi.
 * @export
 * @interface PushToCardApiManagePayeeRequest
 */
export type PushToCardApiManagePayeeRequest = {
    
    /**
    * Globally Unique Identifier for the Payee that will be changed
    * @type {string}
    * @memberof PushToCardApiManagePayee
    */
    readonly payeeGuid: string
    
    /**
    * Must be \'enable\' or \'disable\'
    * @type {'enable' | 'disable'}
    * @memberof PushToCardApiManagePayee
    */
    readonly status: 'enable' | 'disable'
    
}

/**
 * Request parameters for pushFundsToCardAsync operation in PushToCardApi.
 * @export
 * @interface PushToCardApiPushFundsToCardAsyncRequest
 */
export type PushToCardApiPushFundsToCardAsyncRequest = {
    
    /**
    * For Payment Widget clients. A ridGuid will will be returned upon creation of a Payout. That must be saved and passed here to complete the process.
    * @type {string}
    * @memberof PushToCardApiPushFundsToCardAsync
    */
    readonly ridGuid: string
    
    /**
    * For Payment Widget clients. The cardId is retrieved by calling the Get Payee endpoint.
    * @type {string}
    * @memberof PushToCardApiPushFundsToCardAsync
    */
    readonly cardId: string
    
}

/**
 * Request parameters for updatePayee operation in PushToCardApi.
 * @export
 * @interface PushToCardApiUpdatePayeeRequest
 */
export type PushToCardApiUpdatePayeeRequest = {
    
    /**
    * Globally Unique Identifier for a the Payee that will be updated
    * @type {string}
    * @memberof PushToCardApiUpdatePayee
    */
    readonly payeeGuid: string
    
} & UpdatePayeeDto

/**
 * PushToCardApiGenerated - object-oriented interface
 * @export
 * @class PushToCardApiGenerated
 * @extends {BaseAPI}
 */
export class PushToCardApiGenerated extends BaseAPI {
    /**
     * Use this endpoint to cancel payments within a Payout.
     * @summary Cancel Payments
     * @param {PushToCardApiCancelPaymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushToCardApiGenerated
     */
    public cancelPayments(requestParameters: PushToCardApiCancelPaymentsRequest, options?: AxiosRequestConfig) {
        return PushToCardApiFp(this.configuration).cancelPayments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to create a new Payee.
     * @summary Create Payee
     * @param {PushToCardApiCreatePayeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushToCardApiGenerated
     */
    public createPayee(requestParameters: PushToCardApiCreatePayeeRequest, options?: AxiosRequestConfig) {
        return PushToCardApiFp(this.configuration).createPayee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to create a new Payout.
     * @summary Create Payout
     * @param {PushToCardApiCreatePayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushToCardApiGenerated
     */
    public createPayout(requestParameters: PushToCardApiCreatePayoutRequest, options?: AxiosRequestConfig) {
        return PushToCardApiFp(this.configuration).createPayout(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Authentication Token for DropInUI
     * @param {PushToCardApiGetAuthenticationTokenAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushToCardApiGenerated
     */
    public getAuthenticationTokenAsync(requestParameters: PushToCardApiGetAuthenticationTokenAsyncRequest = {}, options?: AxiosRequestConfig) {
        return PushToCardApiFp(this.configuration).getAuthenticationTokenAsync(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to retrieve a Payee for a specific Payee guid. One or both \'payeeGuid\' or \'payeeEmailAddress\' must be provided.
     * @summary Get Payee
     * @param {PushToCardApiGetPayeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushToCardApiGenerated
     */
    public getPayee(requestParameters: PushToCardApiGetPayeeRequest = {}, options?: AxiosRequestConfig) {
        return PushToCardApiFp(this.configuration).getPayee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to retrieve the details for a Payout for a specific Payout guid.
     * @summary Get Payout Details
     * @param {PushToCardApiGetPayoutDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushToCardApiGenerated
     */
    public getPayoutDetails(requestParameters: PushToCardApiGetPayoutDetailsRequest, options?: AxiosRequestConfig) {
        return PushToCardApiFp(this.configuration).getPayoutDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to enable or disable a Payee.
     * @summary Manage Payee
     * @param {PushToCardApiManagePayeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushToCardApiGenerated
     */
    public managePayee(requestParameters: PushToCardApiManagePayeeRequest, options?: AxiosRequestConfig) {
        return PushToCardApiFp(this.configuration).managePayee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Push Funds to a Card
     * @param {PushToCardApiPushFundsToCardAsyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushToCardApiGenerated
     */
    public pushFundsToCardAsync(requestParameters: PushToCardApiPushFundsToCardAsyncRequest, options?: AxiosRequestConfig) {
        return PushToCardApiFp(this.configuration).pushFundsToCardAsync(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to update data for a Payee.
     * @summary Update Payee
     * @param {PushToCardApiUpdatePayeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushToCardApiGenerated
     */
    public updatePayee(requestParameters: PushToCardApiUpdatePayeeRequest, options?: AxiosRequestConfig) {
        return PushToCardApiFp(this.configuration).updatePayee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
