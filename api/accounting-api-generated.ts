/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DailyAccountingDetailPaginatedItems } from '../models';
// @ts-ignore
import { DailyAccountingSummary } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountingApi - axios parameter creator
 * @export
 */
export const AccountingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the paginated daily accounting detail items of a client for a given release date.
         * @summary Get Daily Accounting Detail
         * @param {string} merchantGuid The client identifier for the requested transactions.
         * @param {string | Date} releasedDate Date on which the requested transactions were released to the client.
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyDetail: async (merchantGuid: string, releasedDate: string | Date, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantGuid' is not null or undefined
            assertParamExists('getDailyDetail', 'merchantGuid', merchantGuid)
            // verify required parameter 'releasedDate' is not null or undefined
            assertParamExists('getDailyDetail', 'releasedDate', releasedDate)
            const localVarPath = `/api/v1/Accounting/DailyDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (merchantGuid !== undefined) {
                localVarQueryParameter['merchantGuid'] = merchantGuid;
            }

            if (releasedDate !== undefined) {
                localVarQueryParameter['releasedDate'] = (releasedDate as any instanceof Date) ?
                    (releasedDate as any).toISOString().substr(0,10) :
                    releasedDate;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Accounting/DailyDetail',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the daily accounting summary of a merchant for a given release date.
         * @summary Get Daily Accounting Summary
         * @param {string} merchantGuid The client identifier for the requested transactions.
         * @param {string | Date} releasedDate Date on which the requested transactions were released to the client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailySummary: async (merchantGuid: string, releasedDate: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantGuid' is not null or undefined
            assertParamExists('getDailySummary', 'merchantGuid', merchantGuid)
            // verify required parameter 'releasedDate' is not null or undefined
            assertParamExists('getDailySummary', 'releasedDate', releasedDate)
            const localVarPath = `/api/v1/Accounting/DailySummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (merchantGuid !== undefined) {
                localVarQueryParameter['merchantGuid'] = merchantGuid;
            }

            if (releasedDate !== undefined) {
                localVarQueryParameter['releasedDate'] = (releasedDate as any instanceof Date) ?
                    (releasedDate as any).toISOString().substr(0,10) :
                    releasedDate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Accounting/DailySummary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountingApi - functional programming interface
 * @export
 */
export const AccountingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountingApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns the paginated daily accounting detail items of a client for a given release date.
         * @summary Get Daily Accounting Detail
         * @param {AccountingApiGetDailyDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyDetail(requestParameters: AccountingApiGetDailyDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DailyAccountingDetailPaginatedItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyDetail(requestParameters.merchantGuid, requestParameters.releasedDate, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns the daily accounting summary of a merchant for a given release date.
         * @summary Get Daily Accounting Summary
         * @param {AccountingApiGetDailySummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailySummary(requestParameters: AccountingApiGetDailySummaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DailyAccountingSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailySummary(requestParameters.merchantGuid, requestParameters.releasedDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountingApi - factory interface
 * @export
 */
export const AccountingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountingApiFp(configuration)
    return {
        /**
         * This endpoint returns the paginated daily accounting detail items of a client for a given release date.
         * @summary Get Daily Accounting Detail
         * @param {AccountingApiGetDailyDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyDetail(requestParameters: AccountingApiGetDailyDetailRequest, options?: AxiosRequestConfig): AxiosPromise<DailyAccountingDetailPaginatedItems> {
            return localVarFp.getDailyDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the daily accounting summary of a merchant for a given release date.
         * @summary Get Daily Accounting Summary
         * @param {AccountingApiGetDailySummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailySummary(requestParameters: AccountingApiGetDailySummaryRequest, options?: AxiosRequestConfig): AxiosPromise<DailyAccountingSummary> {
            return localVarFp.getDailySummary(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDailyDetail operation in AccountingApi.
 * @export
 * @interface AccountingApiGetDailyDetailRequest
 */
export type AccountingApiGetDailyDetailRequest = {
    
    /**
    * The client identifier for the requested transactions.
    * @type {string}
    * @memberof AccountingApiGetDailyDetail
    */
    readonly merchantGuid: string
    
    /**
    * Date on which the requested transactions were released to the client.
    * @type {string | Date}
    * @memberof AccountingApiGetDailyDetail
    */
    readonly releasedDate: string | Date
    
    /**
    * 
    * @type {number}
    * @memberof AccountingApiGetDailyDetail
    */
    readonly pageNumber?: number
    
    /**
    * 
    * @type {number}
    * @memberof AccountingApiGetDailyDetail
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getDailySummary operation in AccountingApi.
 * @export
 * @interface AccountingApiGetDailySummaryRequest
 */
export type AccountingApiGetDailySummaryRequest = {
    
    /**
    * The client identifier for the requested transactions.
    * @type {string}
    * @memberof AccountingApiGetDailySummary
    */
    readonly merchantGuid: string
    
    /**
    * Date on which the requested transactions were released to the client.
    * @type {string | Date}
    * @memberof AccountingApiGetDailySummary
    */
    readonly releasedDate: string | Date
    
}

/**
 * AccountingApiGenerated - object-oriented interface
 * @export
 * @class AccountingApiGenerated
 * @extends {BaseAPI}
 */
export class AccountingApiGenerated extends BaseAPI {
    /**
     * This endpoint returns the paginated daily accounting detail items of a client for a given release date.
     * @summary Get Daily Accounting Detail
     * @param {AccountingApiGetDailyDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingApiGenerated
     */
    public getDailyDetail(requestParameters: AccountingApiGetDailyDetailRequest, options?: AxiosRequestConfig) {
        return AccountingApiFp(this.configuration).getDailyDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the daily accounting summary of a merchant for a given release date.
     * @summary Get Daily Accounting Summary
     * @param {AccountingApiGetDailySummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingApiGenerated
     */
    public getDailySummary(requestParameters: AccountingApiGetDailySummaryRequest, options?: AxiosRequestConfig) {
        return AccountingApiFp(this.configuration).getDailySummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
