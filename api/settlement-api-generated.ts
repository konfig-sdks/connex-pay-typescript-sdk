/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SettlementSearchVirtualCardSettlementsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SettlementApi - axios parameter creator
 * @export
 */
export const SettlementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint searches for Virtual Card Settlements.
         * @summary Search Settlements
         * @param {number} pageNumber Number of pages of results to return. Default is 1.
         * @param {number} pageSize Size of each page of results. Default is 1000.
         * @param {SettlementSearchVirtualCardSettlementsRequest} [settlementSearchVirtualCardSettlementsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVirtualCardSettlements: async (pageNumber: number, pageSize: number, settlementSearchVirtualCardSettlementsRequest?: SettlementSearchVirtualCardSettlementsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('searchVirtualCardSettlements', 'pageNumber', pageNumber)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('searchVirtualCardSettlements', 'pageSize', pageSize)
            const localVarPath = `/api/v1/Search/Settlements`
                .replace(`{${"PageNumber"}}`, encodeURIComponent(String(pageNumber !== undefined ? pageNumber : `-PageNumber-`)))
                .replace(`{${"PageSize"}}`, encodeURIComponent(String(pageSize !== undefined ? pageSize : `-PageSize-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: settlementSearchVirtualCardSettlementsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Search/Settlements',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(settlementSearchVirtualCardSettlementsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettlementApi - functional programming interface
 * @export
 */
export const SettlementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettlementApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint searches for Virtual Card Settlements.
         * @summary Search Settlements
         * @param {SettlementApiSearchVirtualCardSettlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVirtualCardSettlements(requestParameters: SettlementApiSearchVirtualCardSettlementsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const settlementSearchVirtualCardSettlementsRequest: SettlementSearchVirtualCardSettlementsRequest = {
                MerchantGuid: requestParameters.MerchantGuid,
                DateFrom: requestParameters.DateFrom,
                DateTo: requestParameters.DateTo,
                PostedDateFrom: requestParameters.PostedDateFrom,
                PostedDateTo: requestParameters.PostedDateTo,
                OrderNumber: requestParameters.OrderNumber,
                IssuedAmountFrom: requestParameters.IssuedAmountFrom,
                IssuedAmountTo: requestParameters.IssuedAmountTo,
                IssuedCardLastFour: requestParameters.IssuedCardLastFour,
                PostedAmountFrom: requestParameters.PostedAmountFrom,
                PostedAmountTo: requestParameters.PostedAmountTo,
                ExpirationDateFrom: requestParameters.ExpirationDateFrom,
                ExpirationDateTo: requestParameters.ExpirationDateTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchVirtualCardSettlements(requestParameters.pageNumber, requestParameters.pageSize, settlementSearchVirtualCardSettlementsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettlementApi - factory interface
 * @export
 */
export const SettlementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettlementApiFp(configuration)
    return {
        /**
         * This endpoint searches for Virtual Card Settlements.
         * @summary Search Settlements
         * @param {SettlementApiSearchVirtualCardSettlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVirtualCardSettlements(requestParameters: SettlementApiSearchVirtualCardSettlementsRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.searchVirtualCardSettlements(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for searchVirtualCardSettlements operation in SettlementApi.
 * @export
 * @interface SettlementApiSearchVirtualCardSettlementsRequest
 */
export type SettlementApiSearchVirtualCardSettlementsRequest = {
    
    /**
    * Number of pages of results to return. Default is 1.
    * @type {number}
    * @memberof SettlementApiSearchVirtualCardSettlements
    */
    readonly pageNumber: number
    
    /**
    * Size of each page of results. Default is 1000.
    * @type {number}
    * @memberof SettlementApiSearchVirtualCardSettlements
    */
    readonly pageSize: number
    
} & SettlementSearchVirtualCardSettlementsRequest

/**
 * SettlementApiGenerated - object-oriented interface
 * @export
 * @class SettlementApiGenerated
 * @extends {BaseAPI}
 */
export class SettlementApiGenerated extends BaseAPI {
    /**
     * This endpoint searches for Virtual Card Settlements.
     * @summary Search Settlements
     * @param {SettlementApiSearchVirtualCardSettlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementApiGenerated
     */
    public searchVirtualCardSettlements(requestParameters: SettlementApiSearchVirtualCardSettlementsRequest, options?: AxiosRequestConfig) {
        return SettlementApiFp(this.configuration).searchVirtualCardSettlements(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
