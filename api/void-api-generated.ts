/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { VoidCreateVoidRequest } from '../models';
// @ts-ignore
import { VoidCreateVoidResponse } from '../models';
// @ts-ignore
import { VoidSearchVoidsRequest } from '../models';
// @ts-ignore
import { VoidSearchVoidsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VoidApi - axios parameter creator
 * @export
 */
export const VoidApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates a void.
         * @summary Void
         * @param {VoidCreateVoidRequest} [voidCreateVoidRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVoid: async (voidCreateVoidRequest?: VoidCreateVoidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/void`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: voidCreateVoidRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/void',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(voidCreateVoidRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches sales voids.
         * @summary Search voids
         * @param {string} exportable True or False. It means if you want results exportable to CSV.
         * @param {number} pageNumber Int. Number of page of the results. Default is 1 (Page size default is 500).
         * @param {string} pageSize Int. Size of each page of the results. Default is 500.
         * @param {VoidSearchVoidsRequest} [voidSearchVoidsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVoids: async (exportable: string, pageNumber: number, pageSize: string, voidSearchVoidsRequest?: VoidSearchVoidsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportable' is not null or undefined
            assertParamExists('searchVoids', 'exportable', exportable)
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('searchVoids', 'pageNumber', pageNumber)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('searchVoids', 'pageSize', pageSize)
            const localVarPath = `/api/v1/Search/Voids/{exportable}/{pageNumber}/{pageSize}`
                .replace(`{${"Exportable"}}`, encodeURIComponent(String(exportable !== undefined ? exportable : `-Exportable-`)))
                .replace(`{${"PageNumber"}}`, encodeURIComponent(String(pageNumber !== undefined ? pageNumber : `-PageNumber-`)))
                .replace(`{${"PageSize"}}`, encodeURIComponent(String(pageSize !== undefined ? pageSize : `-PageSize-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: voidSearchVoidsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Search/Voids/{exportable}/{pageNumber}/{pageSize}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(voidSearchVoidsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoidApi - functional programming interface
 * @export
 */
export const VoidApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoidApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint creates a void.
         * @summary Void
         * @param {VoidApiCreateVoidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVoid(requestParameters: VoidApiCreateVoidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoidCreateVoidResponse>> {
            const voidCreateVoidRequest: VoidCreateVoidRequest = {
                DeviceGuid: requestParameters.DeviceGuid,
                SaleGuid: requestParameters.SaleGuid,
                ReturnGuid: requestParameters.ReturnGuid,
                SaleReferenceNumber: requestParameters.SaleReferenceNumber,
                AuthOnlyGuid: requestParameters.AuthOnlyGuid,
                VoidReason: requestParameters.VoidReason,
                Amount: requestParameters.Amount,
                SequenceNumber: requestParameters.SequenceNumber
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVoid(voidCreateVoidRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches sales voids.
         * @summary Search voids
         * @param {VoidApiSearchVoidsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVoids(requestParameters: VoidApiSearchVoidsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoidSearchVoidsResponse>> {
            const voidSearchVoidsRequest: VoidSearchVoidsRequest = {
                MerchantGuid: requestParameters.MerchantGuid,
                VoidReason: requestParameters.VoidReason,
                Status: requestParameters.Status,
                TimeStampFrom: requestParameters.TimeStampFrom,
                TimeStampTo: requestParameters.TimeStampTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchVoids(requestParameters.exportable, requestParameters.pageNumber, requestParameters.pageSize, voidSearchVoidsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VoidApi - factory interface
 * @export
 */
export const VoidApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoidApiFp(configuration)
    return {
        /**
         * This endpoint creates a void.
         * @summary Void
         * @param {VoidApiCreateVoidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVoid(requestParameters: VoidApiCreateVoidRequest, options?: AxiosRequestConfig): AxiosPromise<VoidCreateVoidResponse> {
            return localVarFp.createVoid(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches sales voids.
         * @summary Search voids
         * @param {VoidApiSearchVoidsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVoids(requestParameters: VoidApiSearchVoidsRequest, options?: AxiosRequestConfig): AxiosPromise<VoidSearchVoidsResponse> {
            return localVarFp.searchVoids(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVoid operation in VoidApi.
 * @export
 * @interface VoidApiCreateVoidRequest
 */
export type VoidApiCreateVoidRequest = {
    
} & VoidCreateVoidRequest

/**
 * Request parameters for searchVoids operation in VoidApi.
 * @export
 * @interface VoidApiSearchVoidsRequest
 */
export type VoidApiSearchVoidsRequest = {
    
    /**
    * True or False. It means if you want results exportable to CSV.
    * @type {string}
    * @memberof VoidApiSearchVoids
    */
    readonly exportable: string
    
    /**
    * Int. Number of page of the results. Default is 1 (Page size default is 500).
    * @type {number}
    * @memberof VoidApiSearchVoids
    */
    readonly pageNumber: number
    
    /**
    * Int. Size of each page of the results. Default is 500.
    * @type {string}
    * @memberof VoidApiSearchVoids
    */
    readonly pageSize: string
    
} & VoidSearchVoidsRequest

/**
 * VoidApiGenerated - object-oriented interface
 * @export
 * @class VoidApiGenerated
 * @extends {BaseAPI}
 */
export class VoidApiGenerated extends BaseAPI {
    /**
     * This endpoint creates a void.
     * @summary Void
     * @param {VoidApiCreateVoidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoidApiGenerated
     */
    public createVoid(requestParameters: VoidApiCreateVoidRequest, options?: AxiosRequestConfig) {
        return VoidApiFp(this.configuration).createVoid(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches sales voids.
     * @summary Search voids
     * @param {VoidApiSearchVoidsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoidApiGenerated
     */
    public searchVoids(requestParameters: VoidApiSearchVoidsRequest, options?: AxiosRequestConfig) {
        return VoidApiFp(this.configuration).searchVoids(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
