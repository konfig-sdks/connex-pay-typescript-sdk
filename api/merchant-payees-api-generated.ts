/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MerchantPayeeDto } from '../models';
// @ts-ignore
import { MerchantPayeePaginatedResponse } from '../models';
// @ts-ignore
import { SearchMerchantPayeeDto } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MerchantPayeesApi - axios parameter creator
 * @export
 */
export const MerchantPayeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a payee for a merchant
         * @summary Create merchant payee
         * @param {string} merchantGuid The merchant guid
         * @param {MerchantPayeeDto} merchantPayeeDto The merchant payee dto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayee: async (merchantGuid: string, merchantPayeeDto: MerchantPayeeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantGuid' is not null or undefined
            assertParamExists('createPayee', 'merchantGuid', merchantGuid)
            // verify required parameter 'merchantPayeeDto' is not null or undefined
            assertParamExists('createPayee', 'merchantPayeeDto', merchantPayeeDto)
            const localVarPath = `/api/v1/Merchants/{merchantGuid}/Payees`
                .replace(`{${"merchantGuid"}}`, encodeURIComponent(String(merchantGuid !== undefined ? merchantGuid : `-merchantGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: merchantPayeeDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Merchants/{merchantGuid}/Payees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(merchantPayeeDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a payee for a merchant by guid
         * @summary Delete merchant payee
         * @param {string} merchantGuid The merchant guid
         * @param {string} payeeGuid The payee guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePayee: async (merchantGuid: string, payeeGuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantGuid' is not null or undefined
            assertParamExists('deletePayee', 'merchantGuid', merchantGuid)
            // verify required parameter 'payeeGuid' is not null or undefined
            assertParamExists('deletePayee', 'payeeGuid', payeeGuid)
            const localVarPath = `/api/v1/Merchants/{merchantGuid}/Payees/{payeeGuid}`
                .replace(`{${"merchantGuid"}}`, encodeURIComponent(String(merchantGuid !== undefined ? merchantGuid : `-merchantGuid-`)))
                .replace(`{${"payeeGuid"}}`, encodeURIComponent(String(payeeGuid !== undefined ? payeeGuid : `-payeeGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Merchants/{merchantGuid}/Payees/{payeeGuid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a payee for a merchant by guid
         * @summary Get a merchant payee by guid
         * @param {string} merchantGuid The merchant guid
         * @param {string} payeeGuid The payee guid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayee: async (merchantGuid: string, payeeGuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantGuid' is not null or undefined
            assertParamExists('getPayee', 'merchantGuid', merchantGuid)
            // verify required parameter 'payeeGuid' is not null or undefined
            assertParamExists('getPayee', 'payeeGuid', payeeGuid)
            const localVarPath = `/api/v1/Merchants/{merchantGuid}/Payees/{payeeGuid}`
                .replace(`{${"merchantGuid"}}`, encodeURIComponent(String(merchantGuid !== undefined ? merchantGuid : `-merchantGuid-`)))
                .replace(`{${"payeeGuid"}}`, encodeURIComponent(String(payeeGuid !== undefined ? payeeGuid : `-payeeGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Merchants/{merchantGuid}/Payees/{payeeGuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of payees for a merchant
         * @summary Get merchant payees
         * @param {string} merchantGuid The merchant guid
         * @param {number} page The page number
         * @param {number} pagesize The number of records to return per page
         * @param {SearchMerchantPayeeDto} searchMerchantPayeeDto A payload of search/filter parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayees: async (merchantGuid: string, page: number, pagesize: number, searchMerchantPayeeDto: SearchMerchantPayeeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantGuid' is not null or undefined
            assertParamExists('getPayees', 'merchantGuid', merchantGuid)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getPayees', 'page', page)
            // verify required parameter 'pagesize' is not null or undefined
            assertParamExists('getPayees', 'pagesize', pagesize)
            // verify required parameter 'searchMerchantPayeeDto' is not null or undefined
            assertParamExists('getPayees', 'searchMerchantPayeeDto', searchMerchantPayeeDto)
            const localVarPath = `/api/v1/Merchants/{merchantGuid}/Payees/Search/{page}/{pagesize}`
                .replace(`{${"merchantGuid"}}`, encodeURIComponent(String(merchantGuid !== undefined ? merchantGuid : `-merchantGuid-`)))
                .replace(`{${"page"}}`, encodeURIComponent(String(page !== undefined ? page : `-page-`)))
                .replace(`{${"pagesize"}}`, encodeURIComponent(String(pagesize !== undefined ? pagesize : `-pagesize-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: searchMerchantPayeeDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Merchants/{merchantGuid}/Payees/Search/{page}/{pagesize}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(searchMerchantPayeeDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a payee for a merchant by guid
         * @summary Update merchant payee
         * @param {string} merchantGuid The merchant guid
         * @param {string} payeeGuid The payee guid
         * @param {MerchantPayeeDto} merchantPayeeDto The merchant payee dto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayee: async (merchantGuid: string, payeeGuid: string, merchantPayeeDto: MerchantPayeeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantGuid' is not null or undefined
            assertParamExists('updatePayee', 'merchantGuid', merchantGuid)
            // verify required parameter 'payeeGuid' is not null or undefined
            assertParamExists('updatePayee', 'payeeGuid', payeeGuid)
            // verify required parameter 'merchantPayeeDto' is not null or undefined
            assertParamExists('updatePayee', 'merchantPayeeDto', merchantPayeeDto)
            const localVarPath = `/api/v1/Merchants/{merchantGuid}/Payees/{payeeGuid}`
                .replace(`{${"merchantGuid"}}`, encodeURIComponent(String(merchantGuid !== undefined ? merchantGuid : `-merchantGuid-`)))
                .replace(`{${"payeeGuid"}}`, encodeURIComponent(String(payeeGuid !== undefined ? payeeGuid : `-payeeGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: merchantPayeeDto,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Merchants/{merchantGuid}/Payees/{payeeGuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(merchantPayeeDto, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantPayeesApi - functional programming interface
 * @export
 */
export const MerchantPayeesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantPayeesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a payee for a merchant
         * @summary Create merchant payee
         * @param {MerchantPayeesApiCreatePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayee(requestParameters: MerchantPayeesApiCreatePayeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantPayeeDto>> {
            const merchantPayeeDto: MerchantPayeeDto = {
                idMerchant: requestParameters.idMerchant,
                isBusiness: requestParameters.isBusiness,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                dbaName: requestParameters.dbaName,
                payeeId: requestParameters.payeeId,
                taxId: requestParameters.taxId,
                customerId: requestParameters.customerId,
                email: requestParameters.email,
                address1: requestParameters.address1,
                address2: requestParameters.address2,
                city: requestParameters.city,
                state: requestParameters.state,
                zip: requestParameters.zip,
                country: requestParameters.country,
                preferredPayoutMethod: requestParameters.preferredPayoutMethod,
                preferredCardBrand: requestParameters.preferredCardBrand,
                preferredCardClass: requestParameters.preferredCardClass,
                purchaseType: requestParameters.purchaseType,
                guid: requestParameters.guid,
                timestamp: requestParameters.timestamp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayee(requestParameters.merchantGuid, merchantPayeeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a payee for a merchant by guid
         * @summary Delete merchant payee
         * @param {MerchantPayeesApiDeletePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePayee(requestParameters: MerchantPayeesApiDeletePayeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePayee(requestParameters.merchantGuid, requestParameters.payeeGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a payee for a merchant by guid
         * @summary Get a merchant payee by guid
         * @param {MerchantPayeesApiGetPayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayee(requestParameters: MerchantPayeesApiGetPayeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantPayeeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayee(requestParameters.merchantGuid, requestParameters.payeeGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of payees for a merchant
         * @summary Get merchant payees
         * @param {MerchantPayeesApiGetPayeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayees(requestParameters: MerchantPayeesApiGetPayeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantPayeePaginatedResponse>> {
            const searchMerchantPayeeDto: SearchMerchantPayeeDto = {
                searchTerm: requestParameters.searchTerm
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayees(requestParameters.merchantGuid, requestParameters.page, requestParameters.pagesize, searchMerchantPayeeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a payee for a merchant by guid
         * @summary Update merchant payee
         * @param {MerchantPayeesApiUpdatePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayee(requestParameters: MerchantPayeesApiUpdatePayeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const merchantPayeeDto: MerchantPayeeDto = {
                idMerchant: requestParameters.idMerchant,
                isBusiness: requestParameters.isBusiness,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                dbaName: requestParameters.dbaName,
                payeeId: requestParameters.payeeId,
                taxId: requestParameters.taxId,
                customerId: requestParameters.customerId,
                email: requestParameters.email,
                address1: requestParameters.address1,
                address2: requestParameters.address2,
                city: requestParameters.city,
                state: requestParameters.state,
                zip: requestParameters.zip,
                country: requestParameters.country,
                preferredPayoutMethod: requestParameters.preferredPayoutMethod,
                preferredCardBrand: requestParameters.preferredCardBrand,
                preferredCardClass: requestParameters.preferredCardClass,
                purchaseType: requestParameters.purchaseType,
                guid: requestParameters.guid,
                timestamp: requestParameters.timestamp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayee(requestParameters.merchantGuid, requestParameters.payeeGuid, merchantPayeeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantPayeesApi - factory interface
 * @export
 */
export const MerchantPayeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantPayeesApiFp(configuration)
    return {
        /**
         * Create a payee for a merchant
         * @summary Create merchant payee
         * @param {MerchantPayeesApiCreatePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayee(requestParameters: MerchantPayeesApiCreatePayeeRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantPayeeDto> {
            return localVarFp.createPayee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a payee for a merchant by guid
         * @summary Delete merchant payee
         * @param {MerchantPayeesApiDeletePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePayee(requestParameters: MerchantPayeesApiDeletePayeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePayee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a payee for a merchant by guid
         * @summary Get a merchant payee by guid
         * @param {MerchantPayeesApiGetPayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayee(requestParameters: MerchantPayeesApiGetPayeeRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantPayeeDto> {
            return localVarFp.getPayee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of payees for a merchant
         * @summary Get merchant payees
         * @param {MerchantPayeesApiGetPayeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayees(requestParameters: MerchantPayeesApiGetPayeesRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantPayeePaginatedResponse> {
            return localVarFp.getPayees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a payee for a merchant by guid
         * @summary Update merchant payee
         * @param {MerchantPayeesApiUpdatePayeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayee(requestParameters: MerchantPayeesApiUpdatePayeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePayee(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPayee operation in MerchantPayeesApi.
 * @export
 * @interface MerchantPayeesApiCreatePayeeRequest
 */
export type MerchantPayeesApiCreatePayeeRequest = {
    
    /**
    * The merchant guid
    * @type {string}
    * @memberof MerchantPayeesApiCreatePayee
    */
    readonly merchantGuid: string
    
} & MerchantPayeeDto

/**
 * Request parameters for deletePayee operation in MerchantPayeesApi.
 * @export
 * @interface MerchantPayeesApiDeletePayeeRequest
 */
export type MerchantPayeesApiDeletePayeeRequest = {
    
    /**
    * The merchant guid
    * @type {string}
    * @memberof MerchantPayeesApiDeletePayee
    */
    readonly merchantGuid: string
    
    /**
    * The payee guid
    * @type {string}
    * @memberof MerchantPayeesApiDeletePayee
    */
    readonly payeeGuid: string
    
}

/**
 * Request parameters for getPayee operation in MerchantPayeesApi.
 * @export
 * @interface MerchantPayeesApiGetPayeeRequest
 */
export type MerchantPayeesApiGetPayeeRequest = {
    
    /**
    * The merchant guid
    * @type {string}
    * @memberof MerchantPayeesApiGetPayee
    */
    readonly merchantGuid: string
    
    /**
    * The payee guid
    * @type {string}
    * @memberof MerchantPayeesApiGetPayee
    */
    readonly payeeGuid: string
    
}

/**
 * Request parameters for getPayees operation in MerchantPayeesApi.
 * @export
 * @interface MerchantPayeesApiGetPayeesRequest
 */
export type MerchantPayeesApiGetPayeesRequest = {
    
    /**
    * The merchant guid
    * @type {string}
    * @memberof MerchantPayeesApiGetPayees
    */
    readonly merchantGuid: string
    
    /**
    * The page number
    * @type {number}
    * @memberof MerchantPayeesApiGetPayees
    */
    readonly page: number
    
    /**
    * The number of records to return per page
    * @type {number}
    * @memberof MerchantPayeesApiGetPayees
    */
    readonly pagesize: number
    
} & SearchMerchantPayeeDto

/**
 * Request parameters for updatePayee operation in MerchantPayeesApi.
 * @export
 * @interface MerchantPayeesApiUpdatePayeeRequest
 */
export type MerchantPayeesApiUpdatePayeeRequest = {
    
    /**
    * The merchant guid
    * @type {string}
    * @memberof MerchantPayeesApiUpdatePayee
    */
    readonly merchantGuid: string
    
    /**
    * The payee guid
    * @type {string}
    * @memberof MerchantPayeesApiUpdatePayee
    */
    readonly payeeGuid: string
    
} & MerchantPayeeDto

/**
 * MerchantPayeesApiGenerated - object-oriented interface
 * @export
 * @class MerchantPayeesApiGenerated
 * @extends {BaseAPI}
 */
export class MerchantPayeesApiGenerated extends BaseAPI {
    /**
     * Create a payee for a merchant
     * @summary Create merchant payee
     * @param {MerchantPayeesApiCreatePayeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantPayeesApiGenerated
     */
    public createPayee(requestParameters: MerchantPayeesApiCreatePayeeRequest, options?: AxiosRequestConfig) {
        return MerchantPayeesApiFp(this.configuration).createPayee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a payee for a merchant by guid
     * @summary Delete merchant payee
     * @param {MerchantPayeesApiDeletePayeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantPayeesApiGenerated
     */
    public deletePayee(requestParameters: MerchantPayeesApiDeletePayeeRequest, options?: AxiosRequestConfig) {
        return MerchantPayeesApiFp(this.configuration).deletePayee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a payee for a merchant by guid
     * @summary Get a merchant payee by guid
     * @param {MerchantPayeesApiGetPayeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantPayeesApiGenerated
     */
    public getPayee(requestParameters: MerchantPayeesApiGetPayeeRequest, options?: AxiosRequestConfig) {
        return MerchantPayeesApiFp(this.configuration).getPayee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of payees for a merchant
     * @summary Get merchant payees
     * @param {MerchantPayeesApiGetPayeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantPayeesApiGenerated
     */
    public getPayees(requestParameters: MerchantPayeesApiGetPayeesRequest, options?: AxiosRequestConfig) {
        return MerchantPayeesApiFp(this.configuration).getPayees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a payee for a merchant by guid
     * @summary Update merchant payee
     * @param {MerchantPayeesApiUpdatePayeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantPayeesApiGenerated
     */
    public updatePayee(requestParameters: MerchantPayeesApiUpdatePayeeRequest, options?: AxiosRequestConfig) {
        return MerchantPayeesApiFp(this.configuration).updatePayee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
