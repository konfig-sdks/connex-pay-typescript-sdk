/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReplayPurchaseEventHistoryResendRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReplayApi - axios parameter creator
 * @export
 */
export const ReplayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Call this endpoint to receive VCC, Lodged Card, Physical Card or ACH purchase events either by unique Guid or for a specified date range. If you subscribe to webhooks and are concerned you may be missing events, this endpoint can retrieve past events.
         * @summary Purchase Event History (Replay Webhooks)
         * @param {ReplayPurchaseEventHistoryResendRequest} [replayPurchaseEventHistoryResendRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseEventHistoryResend: async (replayPurchaseEventHistoryResendRequest?: ReplayPurchaseEventHistoryResendRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/PurchaseEventHistory/Resend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: replayPurchaseEventHistoryResendRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/PurchaseEventHistory/Resend',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(replayPurchaseEventHistoryResendRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReplayApi - functional programming interface
 * @export
 */
export const ReplayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReplayApiAxiosParamCreator(configuration)
    return {
        /**
         * Call this endpoint to receive VCC, Lodged Card, Physical Card or ACH purchase events either by unique Guid or for a specified date range. If you subscribe to webhooks and are concerned you may be missing events, this endpoint can retrieve past events.
         * @summary Purchase Event History (Replay Webhooks)
         * @param {ReplayApiPurchaseEventHistoryResendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseEventHistoryResend(requestParameters: ReplayApiPurchaseEventHistoryResendRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const replayPurchaseEventHistoryResendRequest: ReplayPurchaseEventHistoryResendRequest = {
                SourceGuid: requestParameters.SourceGuid,
                MerchantGuid: requestParameters.MerchantGuid,
                EventGuid: requestParameters.EventGuid,
                FromDateTime: requestParameters.FromDateTime,
                ToDateTime: requestParameters.ToDateTime
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseEventHistoryResend(replayPurchaseEventHistoryResendRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReplayApi - factory interface
 * @export
 */
export const ReplayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReplayApiFp(configuration)
    return {
        /**
         * Call this endpoint to receive VCC, Lodged Card, Physical Card or ACH purchase events either by unique Guid or for a specified date range. If you subscribe to webhooks and are concerned you may be missing events, this endpoint can retrieve past events.
         * @summary Purchase Event History (Replay Webhooks)
         * @param {ReplayApiPurchaseEventHistoryResendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseEventHistoryResend(requestParameters: ReplayApiPurchaseEventHistoryResendRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.purchaseEventHistoryResend(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for purchaseEventHistoryResend operation in ReplayApi.
 * @export
 * @interface ReplayApiPurchaseEventHistoryResendRequest
 */
export type ReplayApiPurchaseEventHistoryResendRequest = {
    
} & ReplayPurchaseEventHistoryResendRequest

/**
 * ReplayApiGenerated - object-oriented interface
 * @export
 * @class ReplayApiGenerated
 * @extends {BaseAPI}
 */
export class ReplayApiGenerated extends BaseAPI {
    /**
     * Call this endpoint to receive VCC, Lodged Card, Physical Card or ACH purchase events either by unique Guid or for a specified date range. If you subscribe to webhooks and are concerned you may be missing events, this endpoint can retrieve past events.
     * @summary Purchase Event History (Replay Webhooks)
     * @param {ReplayApiPurchaseEventHistoryResendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReplayApiGenerated
     */
    public purchaseEventHistoryResend(requestParameters: ReplayApiPurchaseEventHistoryResendRequest = {}, options?: AxiosRequestConfig) {
        return ReplayApiFp(this.configuration).purchaseEventHistoryResend(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
