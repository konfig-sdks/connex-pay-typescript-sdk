/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CardActivateDelayedResponse } from '../models';
// @ts-ignore
import { CardCancelVirtualCardResponse } from '../models';
// @ts-ignore
import { CardCreateLodgedCardRequest } from '../models';
// @ts-ignore
import { CardCreateLodgedCardRequestTransmission } from '../models';
// @ts-ignore
import { CardCreateLodgedCardResponse } from '../models';
// @ts-ignore
import { CardGetDetailResponse } from '../models';
// @ts-ignore
import { CardIssuanceCreateVirtualCardRequestCustomParametersInner } from '../models';
// @ts-ignore
import { CardResendTransmissionInfoRequest } from '../models';
// @ts-ignore
import { CardResendTransmissionInfoResponse } from '../models';
// @ts-ignore
import { CardSearchIssuedVirtualCardsRequest } from '../models';
// @ts-ignore
import { CardTerminateByDate400Response } from '../models';
// @ts-ignore
import { CardTerminateByDateResponse } from '../models';
// @ts-ignore
import { CardUpdateCardDetailsRequest } from '../models';
// @ts-ignore
import { CardUpdateCardDetailsResponse } from '../models';
// @ts-ignore
import { CardUpdateDelayedActivationRequest } from '../models';
// @ts-ignore
import { CardUpdateDelayedActivationResponse } from '../models';
// @ts-ignore
import { CardUpdateLodgedCardRequest } from '../models';
// @ts-ignore
import { CardUpdateLodgedCardResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CardApi - axios parameter creator
 * @export
 */
export const CardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to immediately activate a Virtual Card with a delayed activation date
         * @summary Activate Virtual Card with Delayed Activation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateDelayed: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/IssueCard/ActivateDelayedCard/{{CardGuid}}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/IssueCard/ActivateDelayedCard/{{CardGuid}}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint should be called when you want to completely cancel a virtual card you created using the IssueLite endpoint.
         * @summary Cancel Card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelVirtualCard: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/IssueCard/Cancel/{{CardGuid}}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/IssueCard/Cancel/{{CardGuid}}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to create a Lodged Card
         * @summary Issue Lodged Card
         * @param {CardCreateLodgedCardRequest} [cardCreateLodgedCardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLodgedCard: async (cardCreateLodgedCardRequest?: CardCreateLodgedCardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/IssueCard/LodgedCard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardCreateLodgedCardRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/IssueCard/LodgedCard',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardCreateLodgedCardRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This Endpoint returns Virtual Credit Card details for a specific card guid.
         * @summary Get Issue Card Detail
         * @param {string} cardGuid Global Unique Identifier for the VCC.
         * @param {boolean} showFullPan Set to True to indicate whether the response should include the full account number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail: async (cardGuid: string, showFullPan: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardGuid' is not null or undefined
            assertParamExists('getDetail', 'cardGuid', cardGuid)
            // verify required parameter 'showFullPan' is not null or undefined
            assertParamExists('getDetail', 'showFullPan', showFullPan)
            const localVarPath = `/api/v1/Cards/{CardGuid}/{ShowFullPan}`
                .replace(`{${"CardGuid"}}`, encodeURIComponent(String(cardGuid !== undefined ? cardGuid : `-CardGuid-`)))
                .replace(`{${"ShowFullPan"}}`, encodeURIComponent(String(showFullPan !== undefined ? showFullPan : `-ShowFullPan-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Cards/{CardGuid}/{ShowFullPan}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint resends payment information to recipient. Or returns a URL you can use within your application to direct a user to a visual representation of the virtual card.
         * @summary Resend Transmission
         * @param {string} cardGuid Global Unique Identififer for the Card.
         * @param {CardResendTransmissionInfoRequest} [cardResendTransmissionInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendTransmissionInfo: async (cardGuid: string, cardResendTransmissionInfoRequest?: CardResendTransmissionInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardGuid' is not null or undefined
            assertParamExists('resendTransmissionInfo', 'cardGuid', cardGuid)
            const localVarPath = `/api/v1/IssueCard/SendPaymentInfo/{cardGuid}`
                .replace(`{${"CardGuid"}}`, encodeURIComponent(String(cardGuid !== undefined ? cardGuid : `-CardGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardResendTransmissionInfoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/IssueCard/SendPaymentInfo/{cardGuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardResendTransmissionInfoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches for Issued Virtual Cards.
         * @summary Search Issued Cards
         * @param {number} pageNumber Number of page of the results. Default is 1.
         * @param {number} pageSize Size of each page of the results. Default is 1000.
         * @param {CardSearchIssuedVirtualCardsRequest} [cardSearchIssuedVirtualCardsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchIssuedVirtualCards: async (pageNumber: number, pageSize: number, cardSearchIssuedVirtualCardsRequest?: CardSearchIssuedVirtualCardsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('searchIssuedVirtualCards', 'pageNumber', pageNumber)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('searchIssuedVirtualCards', 'pageSize', pageSize)
            const localVarPath = `/api/v1/Search/IssuedCards`
                .replace(`{${"PageNumber"}}`, encodeURIComponent(String(pageNumber !== undefined ? pageNumber : `-PageNumber-`)))
                .replace(`{${"PageSize"}}`, encodeURIComponent(String(pageSize !== undefined ? pageSize : `-PageSize-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardSearchIssuedVirtualCardsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Search/IssuedCards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardSearchIssuedVirtualCardsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  ExpirationDate is the month and year that will be applied to the actual VCC. Note, Returns can still be processed on terminated VCCs.
         * @summary Terminate Card
         * @param {string} guid Card’s guid to terminate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateByDate: async (guid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('terminateByDate', 'guid', guid)
            const localVarPath = `/api/v1/TerminateCard/<guid>`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid !== undefined ? guid : `-guid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/TerminateCard/<guid>',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Card
         * @param {string} cardGuid Global Unique Identififer for the Card.
         * @param {CardUpdateCardDetailsRequest} [cardUpdateCardDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCardDetails: async (cardGuid: string, cardUpdateCardDetailsRequest?: CardUpdateCardDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardGuid' is not null or undefined
            assertParamExists('updateCardDetails', 'cardGuid', cardGuid)
            const localVarPath = `/api/v1/IssueCard/{cardGuid}`
                .replace(`{${"CardGuid"}}`, encodeURIComponent(String(cardGuid !== undefined ? cardGuid : `-CardGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardUpdateCardDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/IssueCard/{cardGuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardUpdateCardDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request this endpoint to update the activation date or card limit of a virtual card with a future activation date.
         * @summary Update Virtual Card with Delayed Activation
         * @param {string} cardGuid Global Unique Identifier for the Card.
         * @param {CardUpdateDelayedActivationRequest} [cardUpdateDelayedActivationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDelayedActivation: async (cardGuid: string, cardUpdateDelayedActivationRequest?: CardUpdateDelayedActivationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardGuid' is not null or undefined
            assertParamExists('updateDelayedActivation', 'cardGuid', cardGuid)
            const localVarPath = `/api/v1/IssueCard/UpdateDelayedCard/{{CardGuid}}`
                .replace(`{${"CardGuid"}}`, encodeURIComponent(String(cardGuid !== undefined ? cardGuid : `-CardGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardUpdateDelayedActivationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/IssueCard/UpdateDelayedCard/{{CardGuid}}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardUpdateDelayedActivationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Lodged Card
         * @param {string} cardGuid Global Unique Identifier for the Card.
         * @param {CardUpdateLodgedCardRequest} [cardUpdateLodgedCardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLodgedCard: async (cardGuid: string, cardUpdateLodgedCardRequest?: CardUpdateLodgedCardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardGuid' is not null or undefined
            assertParamExists('updateLodgedCard', 'cardGuid', cardGuid)
            const localVarPath = `/api/v1/IssueCard/LodgedCard/{CardGuid}`
                .replace(`{${"CardGuid"}}`, encodeURIComponent(String(cardGuid !== undefined ? cardGuid : `-CardGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardUpdateLodgedCardRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/IssueCard/LodgedCard/{CardGuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardUpdateLodgedCardRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardApi - functional programming interface
 * @export
 */
export const CardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to immediately activate a Virtual Card with a delayed activation date
         * @summary Activate Virtual Card with Delayed Activation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateDelayed(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardActivateDelayedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateDelayed(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint should be called when you want to completely cancel a virtual card you created using the IssueLite endpoint.
         * @summary Cancel Card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelVirtualCard(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardCancelVirtualCardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelVirtualCard(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to create a Lodged Card
         * @summary Issue Lodged Card
         * @param {CardApiCreateLodgedCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLodgedCard(requestParameters: CardApiCreateLodgedCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardCreateLodgedCardResponse>> {
            const cardCreateLodgedCardRequest: CardCreateLodgedCardRequest = {
                MerchantGuid: requestParameters.MerchantGuid,
                FirstName: requestParameters.FirstName,
                LastName: requestParameters.LastName,
                Phone: requestParameters.Phone,
                Address1: requestParameters.Address1,
                Address2: requestParameters.Address2,
                City: requestParameters.City,
                State: requestParameters.State,
                ZipCode: requestParameters.ZipCode,
                Country: requestParameters.Country,
                UsageLimit: requestParameters.UsageLimit,
                AmountLimit: requestParameters.AmountLimit,
                LimitWindow: requestParameters.LimitWindow,
                ExpirationDate: requestParameters.ExpirationDate,
                TerminateDate: requestParameters.TerminateDate,
                PurchaseType: requestParameters.PurchaseType,
                SequenceNumber: requestParameters.SequenceNumber,
                OrderNumber: requestParameters.OrderNumber,
                SupplierId: requestParameters.SupplierId,
                NonDomesticSupplier: requestParameters.NonDomesticSupplier,
                Transmission: requestParameters.Transmission,
                ReturnCardData: requestParameters.ReturnCardData,
                CustomerID: requestParameters.CustomerID,
                AssociationId: requestParameters.AssociationId,
                LabelIDs: requestParameters.LabelIDs,
                CustomParameters: requestParameters.CustomParameters
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLodgedCard(cardCreateLodgedCardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This Endpoint returns Virtual Credit Card details for a specific card guid.
         * @summary Get Issue Card Detail
         * @param {CardApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetail(requestParameters: CardApiGetDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardGetDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetail(requestParameters.cardGuid, requestParameters.showFullPan, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint resends payment information to recipient. Or returns a URL you can use within your application to direct a user to a visual representation of the virtual card.
         * @summary Resend Transmission
         * @param {CardApiResendTransmissionInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendTransmissionInfo(requestParameters: CardApiResendTransmissionInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardResendTransmissionInfoResponse>> {
            const cardResendTransmissionInfoRequest: CardResendTransmissionInfoRequest = {
                TransmissionMethods: requestParameters.TransmissionMethods,
                EmailRecipient: requestParameters.EmailRecipient,
                MerchantPhoneNumber: requestParameters.MerchantPhoneNumber,
                EmailFrom: requestParameters.EmailFrom,
                RecipientName: requestParameters.RecipientName,
                Subject: requestParameters.Subject,
                Message: requestParameters.Message,
                DaysToExpire: requestParameters.DaysToExpire,
                FaxFrom: requestParameters.FaxFrom,
                FaxRecipient: requestParameters.FaxRecipient
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendTransmissionInfo(requestParameters.cardGuid, cardResendTransmissionInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches for Issued Virtual Cards.
         * @summary Search Issued Cards
         * @param {CardApiSearchIssuedVirtualCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchIssuedVirtualCards(requestParameters: CardApiSearchIssuedVirtualCardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const cardSearchIssuedVirtualCardsRequest: CardSearchIssuedVirtualCardsRequest = {
                MerchantGuid: requestParameters.MerchantGuid,
                SaleGuid: requestParameters.SaleGuid,
                IncomingTransactionCode: requestParameters.IncomingTransactionCode,
                OrderNumber: requestParameters.OrderNumber,
                CustomerID: requestParameters.CustomerID,
                TimeStampFrom: requestParameters.TimeStampFrom,
                TimeStampTo: requestParameters.TimeStampTo,
                IssuedAmountFrom: requestParameters.IssuedAmountFrom,
                IssuedAmountTo: requestParameters.IssuedAmountTo,
                OutgoingTransactionCode: requestParameters.OutgoingTransactionCode,
                SettledAmountFrom: requestParameters.SettledAmountFrom,
                SettledAmountTo: requestParameters.SettledAmountTo,
                ReturnedAmountFrom: requestParameters.ReturnedAmountFrom,
                ReturnedAmountTo: requestParameters.ReturnedAmountTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchIssuedVirtualCards(requestParameters.pageNumber, requestParameters.pageSize, cardSearchIssuedVirtualCardsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  ExpirationDate is the month and year that will be applied to the actual VCC. Note, Returns can still be processed on terminated VCCs.
         * @summary Terminate Card
         * @param {CardApiTerminateByDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async terminateByDate(requestParameters: CardApiTerminateByDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardTerminateByDateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.terminateByDate(requestParameters.guid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Card
         * @param {CardApiUpdateCardDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCardDetails(requestParameters: CardApiUpdateCardDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardUpdateCardDetailsResponse>> {
            const cardUpdateCardDetailsRequest: CardUpdateCardDetailsRequest = {
                PurchaseType: requestParameters.PurchaseType,
                MIDWhitelist: requestParameters.MIDWhitelist,
                MIDBlacklist: requestParameters.MIDBlacklist,
                UsageLimit: requestParameters.UsageLimit,
                AssociationId: requestParameters.AssociationId,
                TerminateDate: requestParameters.TerminateDate,
                AmountLimit: requestParameters.AmountLimit
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCardDetails(requestParameters.cardGuid, cardUpdateCardDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request this endpoint to update the activation date or card limit of a virtual card with a future activation date.
         * @summary Update Virtual Card with Delayed Activation
         * @param {CardApiUpdateDelayedActivationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDelayedActivation(requestParameters: CardApiUpdateDelayedActivationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardUpdateDelayedActivationResponse>> {
            const cardUpdateDelayedActivationRequest: CardUpdateDelayedActivationRequest = {
                MerchantGuid: requestParameters.MerchantGuid,
                ActivationDate: requestParameters.ActivationDate,
                AmountLimit: requestParameters.AmountLimit,
                TerminateDate: requestParameters.TerminateDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDelayedActivation(requestParameters.cardGuid, cardUpdateDelayedActivationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Lodged Card
         * @param {CardApiUpdateLodgedCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLodgedCard(requestParameters: CardApiUpdateLodgedCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CardUpdateLodgedCardResponse>> {
            const cardUpdateLodgedCardRequest: CardUpdateLodgedCardRequest = {
                UsageLimit: requestParameters.UsageLimit,
                AmountLimit: requestParameters.AmountLimit,
                LimitWindow: requestParameters.LimitWindow,
                PurchaseType: requestParameters.PurchaseType,
                Activated: requestParameters.Activated,
                AssociationId: requestParameters.AssociationId,
                TerminateDate: requestParameters.TerminateDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLodgedCard(requestParameters.cardGuid, cardUpdateLodgedCardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardApi - factory interface
 * @export
 */
export const CardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardApiFp(configuration)
    return {
        /**
         * Use this API to immediately activate a Virtual Card with a delayed activation date
         * @summary Activate Virtual Card with Delayed Activation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateDelayed(options?: AxiosRequestConfig): AxiosPromise<CardActivateDelayedResponse> {
            return localVarFp.activateDelayed(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint should be called when you want to completely cancel a virtual card you created using the IssueLite endpoint.
         * @summary Cancel Card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelVirtualCard(options?: AxiosRequestConfig): AxiosPromise<CardCancelVirtualCardResponse> {
            return localVarFp.cancelVirtualCard(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to create a Lodged Card
         * @summary Issue Lodged Card
         * @param {CardApiCreateLodgedCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLodgedCard(requestParameters: CardApiCreateLodgedCardRequest, options?: AxiosRequestConfig): AxiosPromise<CardCreateLodgedCardResponse> {
            return localVarFp.createLodgedCard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This Endpoint returns Virtual Credit Card details for a specific card guid.
         * @summary Get Issue Card Detail
         * @param {CardApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail(requestParameters: CardApiGetDetailRequest, options?: AxiosRequestConfig): AxiosPromise<CardGetDetailResponse> {
            return localVarFp.getDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint resends payment information to recipient. Or returns a URL you can use within your application to direct a user to a visual representation of the virtual card.
         * @summary Resend Transmission
         * @param {CardApiResendTransmissionInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendTransmissionInfo(requestParameters: CardApiResendTransmissionInfoRequest, options?: AxiosRequestConfig): AxiosPromise<CardResendTransmissionInfoResponse> {
            return localVarFp.resendTransmissionInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches for Issued Virtual Cards.
         * @summary Search Issued Cards
         * @param {CardApiSearchIssuedVirtualCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchIssuedVirtualCards(requestParameters: CardApiSearchIssuedVirtualCardsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.searchIssuedVirtualCards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  ExpirationDate is the month and year that will be applied to the actual VCC. Note, Returns can still be processed on terminated VCCs.
         * @summary Terminate Card
         * @param {CardApiTerminateByDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateByDate(requestParameters: CardApiTerminateByDateRequest, options?: AxiosRequestConfig): AxiosPromise<CardTerminateByDateResponse> {
            return localVarFp.terminateByDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Card
         * @param {CardApiUpdateCardDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCardDetails(requestParameters: CardApiUpdateCardDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<CardUpdateCardDetailsResponse> {
            return localVarFp.updateCardDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Request this endpoint to update the activation date or card limit of a virtual card with a future activation date.
         * @summary Update Virtual Card with Delayed Activation
         * @param {CardApiUpdateDelayedActivationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDelayedActivation(requestParameters: CardApiUpdateDelayedActivationRequest, options?: AxiosRequestConfig): AxiosPromise<CardUpdateDelayedActivationResponse> {
            return localVarFp.updateDelayedActivation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Lodged Card
         * @param {CardApiUpdateLodgedCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLodgedCard(requestParameters: CardApiUpdateLodgedCardRequest, options?: AxiosRequestConfig): AxiosPromise<CardUpdateLodgedCardResponse> {
            return localVarFp.updateLodgedCard(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLodgedCard operation in CardApi.
 * @export
 * @interface CardApiCreateLodgedCardRequest
 */
export type CardApiCreateLodgedCardRequest = {
    
} & CardCreateLodgedCardRequest

/**
 * Request parameters for getDetail operation in CardApi.
 * @export
 * @interface CardApiGetDetailRequest
 */
export type CardApiGetDetailRequest = {
    
    /**
    * Global Unique Identifier for the VCC.
    * @type {string}
    * @memberof CardApiGetDetail
    */
    readonly cardGuid: string
    
    /**
    * Set to True to indicate whether the response should include the full account number.
    * @type {boolean}
    * @memberof CardApiGetDetail
    */
    readonly showFullPan: boolean
    
}

/**
 * Request parameters for resendTransmissionInfo operation in CardApi.
 * @export
 * @interface CardApiResendTransmissionInfoRequest
 */
export type CardApiResendTransmissionInfoRequest = {
    
    /**
    * Global Unique Identififer for the Card.
    * @type {string}
    * @memberof CardApiResendTransmissionInfo
    */
    readonly cardGuid: string
    
} & CardResendTransmissionInfoRequest

/**
 * Request parameters for searchIssuedVirtualCards operation in CardApi.
 * @export
 * @interface CardApiSearchIssuedVirtualCardsRequest
 */
export type CardApiSearchIssuedVirtualCardsRequest = {
    
    /**
    * Number of page of the results. Default is 1.
    * @type {number}
    * @memberof CardApiSearchIssuedVirtualCards
    */
    readonly pageNumber: number
    
    /**
    * Size of each page of the results. Default is 1000.
    * @type {number}
    * @memberof CardApiSearchIssuedVirtualCards
    */
    readonly pageSize: number
    
} & CardSearchIssuedVirtualCardsRequest

/**
 * Request parameters for terminateByDate operation in CardApi.
 * @export
 * @interface CardApiTerminateByDateRequest
 */
export type CardApiTerminateByDateRequest = {
    
    /**
    * Card’s guid to terminate
    * @type {string}
    * @memberof CardApiTerminateByDate
    */
    readonly guid: string
    
}

/**
 * Request parameters for updateCardDetails operation in CardApi.
 * @export
 * @interface CardApiUpdateCardDetailsRequest
 */
export type CardApiUpdateCardDetailsRequest = {
    
    /**
    * Global Unique Identififer for the Card.
    * @type {string}
    * @memberof CardApiUpdateCardDetails
    */
    readonly cardGuid: string
    
} & CardUpdateCardDetailsRequest

/**
 * Request parameters for updateDelayedActivation operation in CardApi.
 * @export
 * @interface CardApiUpdateDelayedActivationRequest
 */
export type CardApiUpdateDelayedActivationRequest = {
    
    /**
    * Global Unique Identifier for the Card.
    * @type {string}
    * @memberof CardApiUpdateDelayedActivation
    */
    readonly cardGuid: string
    
} & CardUpdateDelayedActivationRequest

/**
 * Request parameters for updateLodgedCard operation in CardApi.
 * @export
 * @interface CardApiUpdateLodgedCardRequest
 */
export type CardApiUpdateLodgedCardRequest = {
    
    /**
    * Global Unique Identifier for the Card.
    * @type {string}
    * @memberof CardApiUpdateLodgedCard
    */
    readonly cardGuid: string
    
} & CardUpdateLodgedCardRequest

/**
 * CardApiGenerated - object-oriented interface
 * @export
 * @class CardApiGenerated
 * @extends {BaseAPI}
 */
export class CardApiGenerated extends BaseAPI {
    /**
     * Use this API to immediately activate a Virtual Card with a delayed activation date
     * @summary Activate Virtual Card with Delayed Activation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public activateDelayed(options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).activateDelayed(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint should be called when you want to completely cancel a virtual card you created using the IssueLite endpoint.
     * @summary Cancel Card
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public cancelVirtualCard(options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).cancelVirtualCard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to create a Lodged Card
     * @summary Issue Lodged Card
     * @param {CardApiCreateLodgedCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public createLodgedCard(requestParameters: CardApiCreateLodgedCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).createLodgedCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This Endpoint returns Virtual Credit Card details for a specific card guid.
     * @summary Get Issue Card Detail
     * @param {CardApiGetDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public getDetail(requestParameters: CardApiGetDetailRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).getDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint resends payment information to recipient. Or returns a URL you can use within your application to direct a user to a visual representation of the virtual card.
     * @summary Resend Transmission
     * @param {CardApiResendTransmissionInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public resendTransmissionInfo(requestParameters: CardApiResendTransmissionInfoRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).resendTransmissionInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches for Issued Virtual Cards.
     * @summary Search Issued Cards
     * @param {CardApiSearchIssuedVirtualCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public searchIssuedVirtualCards(requestParameters: CardApiSearchIssuedVirtualCardsRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).searchIssuedVirtualCards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The TerminateDate (YYYY-MM-DD format) is the date the Virtual Credit Card will be terminated by ConnexPay. TerminateDate is different than ExpirationDate in that TerminateDate indicates the actual date the card will no longer be active.  ExpirationDate is the month and year that will be applied to the actual VCC. Note, Returns can still be processed on terminated VCCs.
     * @summary Terminate Card
     * @param {CardApiTerminateByDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public terminateByDate(requestParameters: CardApiTerminateByDateRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).terminateByDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Card
     * @param {CardApiUpdateCardDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateCardDetails(requestParameters: CardApiUpdateCardDetailsRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateCardDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request this endpoint to update the activation date or card limit of a virtual card with a future activation date.
     * @summary Update Virtual Card with Delayed Activation
     * @param {CardApiUpdateDelayedActivationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateDelayedActivation(requestParameters: CardApiUpdateDelayedActivationRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateDelayedActivation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Lodged Card
     * @param {CardApiUpdateLodgedCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardApiGenerated
     */
    public updateLodgedCard(requestParameters: CardApiUpdateLodgedCardRequest, options?: AxiosRequestConfig) {
        return CardApiFp(this.configuration).updateLodgedCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
