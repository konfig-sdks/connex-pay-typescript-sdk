/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TokenGenerateReportingTokenRequest } from '../models';
// @ts-ignore
import { TokenGenerateReportingTokenResponse } from '../models';
// @ts-ignore
import { TokenIssueAuthenticationTokenRequest } from '../models';
// @ts-ignore
import { TokenIssueAuthenticationTokenResponse } from '../models';
// @ts-ignore
import { TokenRequestHppTokenRequest } from '../models';
// @ts-ignore
import { TokenRequestHppTokenRequestSale } from '../models';
// @ts-ignore
import { TokenRequestHppTokenResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TokenApi - axios parameter creator
 * @export
 */
export const TokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Reporting API requests require a combination of assigned Bridge user name, Bridge password, and a successfully generated authentication token. The Bridge credentials used are assigned separately from the Purchase and Sales API credentials. The received token for Reporting is valid for 60 minutes from issuance and may be used for all requests during its lifespan.
         * @summary Reporting Token
         * @param {TokenGenerateReportingTokenRequest} [tokenGenerateReportingTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReportingToken: async (tokenGenerateReportingTokenRequest?: TokenGenerateReportingTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tokenGenerateReportingTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/authenticate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tokenGenerateReportingTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API requests require a combination of assigned user name, password, and successfully generated authentication token. The received token is valid for 24 hours from issuance and may be used for all requests during its lifespan.
         * @summary Issuing Token
         * @param {TokenIssueAuthenticationTokenRequest} [tokenIssueAuthenticationTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueAuthenticationToken: async (tokenIssueAuthenticationTokenRequest?: TokenIssueAuthenticationTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tokenIssueAuthenticationTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tokenIssueAuthenticationTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HPP Token Request
         * @param {TokenRequestHppTokenRequest} [tokenRequestHppTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestHppToken: async (tokenRequestHppTokenRequest?: TokenRequestHppTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/HostedPaymentPageRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tokenRequestHppTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/HostedPaymentPageRequests',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRequestHppTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenApi - functional programming interface
 * @export
 */
export const TokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenApiAxiosParamCreator(configuration)
    return {
        /**
         * Reporting API requests require a combination of assigned Bridge user name, Bridge password, and a successfully generated authentication token. The Bridge credentials used are assigned separately from the Purchase and Sales API credentials. The received token for Reporting is valid for 60 minutes from issuance and may be used for all requests during its lifespan.
         * @summary Reporting Token
         * @param {TokenApiGenerateReportingTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateReportingToken(requestParameters: TokenApiGenerateReportingTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenGenerateReportingTokenResponse>> {
            const tokenGenerateReportingTokenRequest: TokenGenerateReportingTokenRequest = {
                UserName: requestParameters.UserName,
                Password: requestParameters.Password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateReportingToken(tokenGenerateReportingTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API requests require a combination of assigned user name, password, and successfully generated authentication token. The received token is valid for 24 hours from issuance and may be used for all requests during its lifespan.
         * @summary Issuing Token
         * @param {TokenApiIssueAuthenticationTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issueAuthenticationToken(requestParameters: TokenApiIssueAuthenticationTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenIssueAuthenticationTokenResponse>> {
            const tokenIssueAuthenticationTokenRequest: TokenIssueAuthenticationTokenRequest = {
                grant_type: requestParameters.grant_type,
                username: requestParameters.username,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.issueAuthenticationToken(tokenIssueAuthenticationTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HPP Token Request
         * @param {TokenApiRequestHppTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestHppToken(requestParameters: TokenApiRequestHppTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRequestHppTokenResponse>> {
            const tokenRequestHppTokenRequest: TokenRequestHppTokenRequest = {
                MerchantName: requestParameters.MerchantName,
                Description: requestParameters.Description,
                ResultRedirectUrl: requestParameters.ResultRedirectUrl,
                LogoUrl: requestParameters.LogoUrl,
                TenderTypeOptions: requestParameters.TenderTypeOptions,
                Expiration: requestParameters.Expiration,
                Sale: requestParameters.Sale
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestHppToken(tokenRequestHppTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenApi - factory interface
 * @export
 */
export const TokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenApiFp(configuration)
    return {
        /**
         * Reporting API requests require a combination of assigned Bridge user name, Bridge password, and a successfully generated authentication token. The Bridge credentials used are assigned separately from the Purchase and Sales API credentials. The received token for Reporting is valid for 60 minutes from issuance and may be used for all requests during its lifespan.
         * @summary Reporting Token
         * @param {TokenApiGenerateReportingTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReportingToken(requestParameters: TokenApiGenerateReportingTokenRequest, options?: AxiosRequestConfig): AxiosPromise<TokenGenerateReportingTokenResponse> {
            return localVarFp.generateReportingToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * API requests require a combination of assigned user name, password, and successfully generated authentication token. The received token is valid for 24 hours from issuance and may be used for all requests during its lifespan.
         * @summary Issuing Token
         * @param {TokenApiIssueAuthenticationTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueAuthenticationToken(requestParameters: TokenApiIssueAuthenticationTokenRequest, options?: AxiosRequestConfig): AxiosPromise<TokenIssueAuthenticationTokenResponse> {
            return localVarFp.issueAuthenticationToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HPP Token Request
         * @param {TokenApiRequestHppTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestHppToken(requestParameters: TokenApiRequestHppTokenRequest, options?: AxiosRequestConfig): AxiosPromise<TokenRequestHppTokenResponse> {
            return localVarFp.requestHppToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateReportingToken operation in TokenApi.
 * @export
 * @interface TokenApiGenerateReportingTokenRequest
 */
export type TokenApiGenerateReportingTokenRequest = {
    
} & TokenGenerateReportingTokenRequest

/**
 * Request parameters for issueAuthenticationToken operation in TokenApi.
 * @export
 * @interface TokenApiIssueAuthenticationTokenRequest
 */
export type TokenApiIssueAuthenticationTokenRequest = {
    
} & TokenIssueAuthenticationTokenRequest

/**
 * Request parameters for requestHppToken operation in TokenApi.
 * @export
 * @interface TokenApiRequestHppTokenRequest
 */
export type TokenApiRequestHppTokenRequest = {
    
} & TokenRequestHppTokenRequest

/**
 * TokenApiGenerated - object-oriented interface
 * @export
 * @class TokenApiGenerated
 * @extends {BaseAPI}
 */
export class TokenApiGenerated extends BaseAPI {
    /**
     * Reporting API requests require a combination of assigned Bridge user name, Bridge password, and a successfully generated authentication token. The Bridge credentials used are assigned separately from the Purchase and Sales API credentials. The received token for Reporting is valid for 60 minutes from issuance and may be used for all requests during its lifespan.
     * @summary Reporting Token
     * @param {TokenApiGenerateReportingTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public generateReportingToken(requestParameters: TokenApiGenerateReportingTokenRequest, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).generateReportingToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API requests require a combination of assigned user name, password, and successfully generated authentication token. The received token is valid for 24 hours from issuance and may be used for all requests during its lifespan.
     * @summary Issuing Token
     * @param {TokenApiIssueAuthenticationTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public issueAuthenticationToken(requestParameters: TokenApiIssueAuthenticationTokenRequest, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).issueAuthenticationToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HPP Token Request
     * @param {TokenApiRequestHppTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public requestHppToken(requestParameters: TokenApiRequestHppTokenRequest, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).requestHppToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
