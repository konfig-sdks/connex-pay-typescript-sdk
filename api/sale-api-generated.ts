/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SaleCreateTransaction201Response } from '../models';
// @ts-ignore
import { SaleCreateTransaction202Response } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequest } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequestBankAccount } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequestBrowserData } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequestCard } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequestConnexPayTransaction } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequestCustomParametersInner } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequestCustomer } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequestEnhancedData } from '../models';
// @ts-ignore
import { SaleCreateTransactionRequestRiskData } from '../models';
// @ts-ignore
import { SaleCreateTransactionResponse } from '../models';
// @ts-ignore
import { SaleSearchSalesRequest } from '../models';
// @ts-ignore
import { SaleSearchSalesResponse } from '../models';
// @ts-ignore
import { SaleUpdateDelayedActivationRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SaleApi - axios parameter creator
 * @export
 */
export const SaleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Activate a delayed activation sale independent of the activation date for which the sale was created.  A client can \"Activate\" a delayed activation sale this way at any time before ConnexPay will automatically activate it during the early hours of the supplied future date.
         * @summary Activate Delayed Sale
         * @param {string} saleGuid The sale guid returned upon initial creation of the delayed activation sale.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateDelayed: async (saleGuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleGuid' is not null or undefined
            assertParamExists('activateDelayed', 'saleGuid', saleGuid)
            const localVarPath = `/api/v1/sales/Activate/{SaleGuid}`
                .replace(`{${"SaleGuid"}}`, encodeURIComponent(String(saleGuid !== undefined ? saleGuid : `-SaleGuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/sales/Activate/{SaleGuid}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Create Sale Endpoint is used by acquiring clients. The Sale transaction is used to create a sale for your consumer. You can create a credit sale or an ACH sale (ACH sales apply to US Clients only). A credit sale will charge a consumer\'s credit card. The consumer\'s credit card will be authorized immediately when the Sales request is received and will automatically settle/batch that same night. In other words, this one Sale request is just like running an AuthOnly and a Capture in one request.You can postpone charging the consumer\'s credit card by providing a date in the \'ActivationDate\' of your request. Doing so will delay the authorization and charge to the consumer\'s credit card until that future date.An ACH sale will create an ACH transaction that will debit the consumer\'s bank account. ACH sales received prior to 3:00 PM EST will process overnight. ACH Sales received after 3:00 PM EST will process the following night.
         * @summary Create Sale
         * @param {SaleCreateTransactionRequest} [saleCreateTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction: async (saleCreateTransactionRequest?: SaleCreateTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: saleCreateTransactionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/sales',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(saleCreateTransactionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sales Chargebacks
         * @param {string} getByUserstartDate20161201 Return all chargebacks for the authenticated user with a start date
         * @param {string} getByUserstartDate20161201endDate20161201 Return all chargebacks for the authenticated user with a start and end date
         * @param {string} getByResolvedDatestartDate20190920endDate20191021 Return all chargebacks for the authenticated user with a start and end date based on resolved date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebacksByUser: async (getByUserstartDate20161201: string, getByUserstartDate20161201endDate20161201: string, getByResolvedDatestartDate20190920endDate20191021: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getByUserstartDate20161201' is not null or undefined
            assertParamExists('getChargebacksByUser', 'getByUserstartDate20161201', getByUserstartDate20161201)
            // verify required parameter 'getByUserstartDate20161201endDate20161201' is not null or undefined
            assertParamExists('getChargebacksByUser', 'getByUserstartDate20161201endDate20161201', getByUserstartDate20161201endDate20161201)
            // verify required parameter 'getByResolvedDatestartDate20190920endDate20191021' is not null or undefined
            assertParamExists('getChargebacksByUser', 'getByResolvedDatestartDate20190920endDate20191021', getByResolvedDatestartDate20190920endDate20191021)
            const localVarPath = `/api/chargeback/GetByUser`
                .replace(`{${"/GetByUser?startDate&#x3D;2016-12-01"}}`, encodeURIComponent(String(getByUserstartDate20161201 !== undefined ? getByUserstartDate20161201 : `-/GetByUser?startDate=2016-12-01-`)))
                .replace(`{${"/GetByUser?startDate&#x3D;2016-12-01&amp;endDate&#x3D;2016-12-01"}}`, encodeURIComponent(String(getByUserstartDate20161201endDate20161201 !== undefined ? getByUserstartDate20161201endDate20161201 : `-/GetByUser?startDate=2016-12-01&endDate=2016-12-01-`)))
                .replace(`{${"/GetByResolvedDate?startDate&#x3D;2019-09-20&amp;endDate&#x3D;2019-10-21"}}`, encodeURIComponent(String(getByResolvedDatestartDate20190920endDate20191021 !== undefined ? getByResolvedDatestartDate20190920endDate20191021 : `-/GetByResolvedDate?startDate=2019-09-20&endDate=2019-10-21-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/chargeback/GetByUser',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches sales.
         * @summary Search sales
         * @param {string} exportable True or False. It means if you want results exportable to CSV.
         * @param {number} pageNumber Int. Number of page of the results. Default is 1 (Page size default is 500).
         * @param {string} pageSize Int. Size of each page of the results. Default is 500.
         * @param {SaleSearchSalesRequest} [saleSearchSalesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSales: async (exportable: string, pageNumber: number, pageSize: string, saleSearchSalesRequest?: SaleSearchSalesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportable' is not null or undefined
            assertParamExists('searchSales', 'exportable', exportable)
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('searchSales', 'pageNumber', pageNumber)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('searchSales', 'pageSize', pageSize)
            const localVarPath = `/api/v1/Search/Sales/{exportable}/{pageNumber}/{pageSize}`
                .replace(`{${"Exportable"}}`, encodeURIComponent(String(exportable !== undefined ? exportable : `-Exportable-`)))
                .replace(`{${"PageNumber"}}`, encodeURIComponent(String(pageNumber !== undefined ? pageNumber : `-PageNumber-`)))
                .replace(`{${"PageSize"}}`, encodeURIComponent(String(pageSize !== undefined ? pageSize : `-PageSize-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: saleSearchSalesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Search/Sales/{exportable}/{pageNumber}/{pageSize}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(saleSearchSalesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the sale amount or activation date on a delayed activation sale.
         * @summary Update Delayed Sale
         * @param {SaleUpdateDelayedActivationRequest} [saleUpdateDelayedActivationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDelayedActivation: async (saleUpdateDelayedActivationRequest?: SaleUpdateDelayedActivationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sales/UpdateFutureSale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: saleUpdateDelayedActivationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/sales/UpdateFutureSale',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(saleUpdateDelayedActivationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SaleApi - functional programming interface
 * @export
 */
export const SaleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SaleApiAxiosParamCreator(configuration)
    return {
        /**
         * Activate a delayed activation sale independent of the activation date for which the sale was created.  A client can \"Activate\" a delayed activation sale this way at any time before ConnexPay will automatically activate it during the early hours of the supplied future date.
         * @summary Activate Delayed Sale
         * @param {SaleApiActivateDelayedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateDelayed(requestParameters: SaleApiActivateDelayedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateDelayed(requestParameters.saleGuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The Create Sale Endpoint is used by acquiring clients. The Sale transaction is used to create a sale for your consumer. You can create a credit sale or an ACH sale (ACH sales apply to US Clients only). A credit sale will charge a consumer\'s credit card. The consumer\'s credit card will be authorized immediately when the Sales request is received and will automatically settle/batch that same night. In other words, this one Sale request is just like running an AuthOnly and a Capture in one request.You can postpone charging the consumer\'s credit card by providing a date in the \'ActivationDate\' of your request. Doing so will delay the authorization and charge to the consumer\'s credit card until that future date.An ACH sale will create an ACH transaction that will debit the consumer\'s bank account. ACH sales received prior to 3:00 PM EST will process overnight. ACH Sales received after 3:00 PM EST will process the following night.
         * @summary Create Sale
         * @param {SaleApiCreateTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransaction(requestParameters: SaleApiCreateTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleCreateTransactionResponse>> {
            const saleCreateTransactionRequest: SaleCreateTransactionRequest = {
                DeviceGuid: requestParameters.DeviceGuid,
                Amount: requestParameters.Amount,
                TenderType: requestParameters.TenderType,
                SequenceNumber: requestParameters.SequenceNumber,
                OrderNumber: requestParameters.OrderNumber,
                SendReceipt: requestParameters.SendReceipt,
                RiskProcessingOnly: requestParameters.RiskProcessingOnly,
                StatementDescription: requestParameters.StatementDescription,
                CustomerID: requestParameters.CustomerID,
                ActivationDate: requestParameters.ActivationDate,
                RequestIp: requestParameters.RequestIp,
                ConnexPayTransaction: requestParameters.ConnexPayTransaction,
                RiskData: requestParameters.RiskData,
                Card: requestParameters.Card,
                BankAccount: requestParameters.BankAccount,
                Customer: requestParameters.Customer,
                EnhancedData: requestParameters.EnhancedData,
                AssociationId: requestParameters.AssociationId,
                CustomParameters: requestParameters.CustomParameters,
                LabelIDs: requestParameters.LabelIDs,
                BrowserData: requestParameters.BrowserData
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransaction(saleCreateTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sales Chargebacks
         * @param {SaleApiGetChargebacksByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChargebacksByUser(requestParameters: SaleApiGetChargebacksByUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChargebacksByUser(requestParameters.getByUserstartDate20161201, requestParameters.getByUserstartDate20161201endDate20161201, requestParameters.getByResolvedDatestartDate20190920endDate20191021, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches sales.
         * @summary Search sales
         * @param {SaleApiSearchSalesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSales(requestParameters: SaleApiSearchSalesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleSearchSalesResponse>> {
            const saleSearchSalesRequest: SaleSearchSalesRequest = {
                MerchantGuid: requestParameters.MerchantGuid,
                AmountFrom: requestParameters.AmountFrom,
                AmountTo: requestParameters.AmountTo,
                CardHolderName: requestParameters.CardHolderName,
                CardLastFour: requestParameters.CardLastFour,
                CardType: requestParameters.CardType,
                InvoiceNumber: requestParameters.InvoiceNumber,
                OrderNumber: requestParameters.OrderNumber,
                OrderDateFrom: requestParameters.OrderDateFrom,
                OrderDateTo: requestParameters.OrderDateTo,
                TimeStampFrom: requestParameters.TimeStampFrom,
                TimeStampTo: requestParameters.TimeStampTo,
                Status: requestParameters.Status,
                MerchantCustomerId: requestParameters.MerchantCustomerId,
                Activated: requestParameters.Activated,
                ActivationDateFrom: requestParameters.ActivationDateFrom,
                ActivationDateTo: requestParameters.ActivationDateTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSales(requestParameters.exportable, requestParameters.pageNumber, requestParameters.pageSize, saleSearchSalesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the sale amount or activation date on a delayed activation sale.
         * @summary Update Delayed Sale
         * @param {SaleApiUpdateDelayedActivationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDelayedActivation(requestParameters: SaleApiUpdateDelayedActivationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const saleUpdateDelayedActivationRequest: SaleUpdateDelayedActivationRequest = {
                DeviceGuid: requestParameters.DeviceGuid,
                SaleGuid: requestParameters.SaleGuid,
                Amount: requestParameters.Amount,
                ActivationDate: requestParameters.ActivationDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDelayedActivation(saleUpdateDelayedActivationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SaleApi - factory interface
 * @export
 */
export const SaleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SaleApiFp(configuration)
    return {
        /**
         * Activate a delayed activation sale independent of the activation date for which the sale was created.  A client can \"Activate\" a delayed activation sale this way at any time before ConnexPay will automatically activate it during the early hours of the supplied future date.
         * @summary Activate Delayed Sale
         * @param {SaleApiActivateDelayedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateDelayed(requestParameters: SaleApiActivateDelayedRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.activateDelayed(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The Create Sale Endpoint is used by acquiring clients. The Sale transaction is used to create a sale for your consumer. You can create a credit sale or an ACH sale (ACH sales apply to US Clients only). A credit sale will charge a consumer\'s credit card. The consumer\'s credit card will be authorized immediately when the Sales request is received and will automatically settle/batch that same night. In other words, this one Sale request is just like running an AuthOnly and a Capture in one request.You can postpone charging the consumer\'s credit card by providing a date in the \'ActivationDate\' of your request. Doing so will delay the authorization and charge to the consumer\'s credit card until that future date.An ACH sale will create an ACH transaction that will debit the consumer\'s bank account. ACH sales received prior to 3:00 PM EST will process overnight. ACH Sales received after 3:00 PM EST will process the following night.
         * @summary Create Sale
         * @param {SaleApiCreateTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction(requestParameters: SaleApiCreateTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<SaleCreateTransactionResponse> {
            return localVarFp.createTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sales Chargebacks
         * @param {SaleApiGetChargebacksByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebacksByUser(requestParameters: SaleApiGetChargebacksByUserRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getChargebacksByUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches sales.
         * @summary Search sales
         * @param {SaleApiSearchSalesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSales(requestParameters: SaleApiSearchSalesRequest, options?: AxiosRequestConfig): AxiosPromise<SaleSearchSalesResponse> {
            return localVarFp.searchSales(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the sale amount or activation date on a delayed activation sale.
         * @summary Update Delayed Sale
         * @param {SaleApiUpdateDelayedActivationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDelayedActivation(requestParameters: SaleApiUpdateDelayedActivationRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateDelayedActivation(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for activateDelayed operation in SaleApi.
 * @export
 * @interface SaleApiActivateDelayedRequest
 */
export type SaleApiActivateDelayedRequest = {
    
    /**
    * The sale guid returned upon initial creation of the delayed activation sale.
    * @type {string}
    * @memberof SaleApiActivateDelayed
    */
    readonly saleGuid: string
    
}

/**
 * Request parameters for createTransaction operation in SaleApi.
 * @export
 * @interface SaleApiCreateTransactionRequest
 */
export type SaleApiCreateTransactionRequest = {
    
} & SaleCreateTransactionRequest

/**
 * Request parameters for getChargebacksByUser operation in SaleApi.
 * @export
 * @interface SaleApiGetChargebacksByUserRequest
 */
export type SaleApiGetChargebacksByUserRequest = {
    
    /**
    * Return all chargebacks for the authenticated user with a start date
    * @type {string}
    * @memberof SaleApiGetChargebacksByUser
    */
    readonly getByUserstartDate20161201: string
    
    /**
    * Return all chargebacks for the authenticated user with a start and end date
    * @type {string}
    * @memberof SaleApiGetChargebacksByUser
    */
    readonly getByUserstartDate20161201endDate20161201: string
    
    /**
    * Return all chargebacks for the authenticated user with a start and end date based on resolved date
    * @type {string}
    * @memberof SaleApiGetChargebacksByUser
    */
    readonly getByResolvedDatestartDate20190920endDate20191021: string
    
}

/**
 * Request parameters for searchSales operation in SaleApi.
 * @export
 * @interface SaleApiSearchSalesRequest
 */
export type SaleApiSearchSalesRequest = {
    
    /**
    * True or False. It means if you want results exportable to CSV.
    * @type {string}
    * @memberof SaleApiSearchSales
    */
    readonly exportable: string
    
    /**
    * Int. Number of page of the results. Default is 1 (Page size default is 500).
    * @type {number}
    * @memberof SaleApiSearchSales
    */
    readonly pageNumber: number
    
    /**
    * Int. Size of each page of the results. Default is 500.
    * @type {string}
    * @memberof SaleApiSearchSales
    */
    readonly pageSize: string
    
} & SaleSearchSalesRequest

/**
 * Request parameters for updateDelayedActivation operation in SaleApi.
 * @export
 * @interface SaleApiUpdateDelayedActivationRequest
 */
export type SaleApiUpdateDelayedActivationRequest = {
    
} & SaleUpdateDelayedActivationRequest

/**
 * SaleApiGenerated - object-oriented interface
 * @export
 * @class SaleApiGenerated
 * @extends {BaseAPI}
 */
export class SaleApiGenerated extends BaseAPI {
    /**
     * Activate a delayed activation sale independent of the activation date for which the sale was created.  A client can \"Activate\" a delayed activation sale this way at any time before ConnexPay will automatically activate it during the early hours of the supplied future date.
     * @summary Activate Delayed Sale
     * @param {SaleApiActivateDelayedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApiGenerated
     */
    public activateDelayed(requestParameters: SaleApiActivateDelayedRequest, options?: AxiosRequestConfig) {
        return SaleApiFp(this.configuration).activateDelayed(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The Create Sale Endpoint is used by acquiring clients. The Sale transaction is used to create a sale for your consumer. You can create a credit sale or an ACH sale (ACH sales apply to US Clients only). A credit sale will charge a consumer\'s credit card. The consumer\'s credit card will be authorized immediately when the Sales request is received and will automatically settle/batch that same night. In other words, this one Sale request is just like running an AuthOnly and a Capture in one request.You can postpone charging the consumer\'s credit card by providing a date in the \'ActivationDate\' of your request. Doing so will delay the authorization and charge to the consumer\'s credit card until that future date.An ACH sale will create an ACH transaction that will debit the consumer\'s bank account. ACH sales received prior to 3:00 PM EST will process overnight. ACH Sales received after 3:00 PM EST will process the following night.
     * @summary Create Sale
     * @param {SaleApiCreateTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApiGenerated
     */
    public createTransaction(requestParameters: SaleApiCreateTransactionRequest, options?: AxiosRequestConfig) {
        return SaleApiFp(this.configuration).createTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sales Chargebacks
     * @param {SaleApiGetChargebacksByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApiGenerated
     */
    public getChargebacksByUser(requestParameters: SaleApiGetChargebacksByUserRequest, options?: AxiosRequestConfig) {
        return SaleApiFp(this.configuration).getChargebacksByUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches sales.
     * @summary Search sales
     * @param {SaleApiSearchSalesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApiGenerated
     */
    public searchSales(requestParameters: SaleApiSearchSalesRequest, options?: AxiosRequestConfig) {
        return SaleApiFp(this.configuration).searchSales(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the sale amount or activation date on a delayed activation sale.
     * @summary Update Delayed Sale
     * @param {SaleApiUpdateDelayedActivationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SaleApiGenerated
     */
    public updateDelayedActivation(requestParameters: SaleApiUpdateDelayedActivationRequest, options?: AxiosRequestConfig) {
        return SaleApiFp(this.configuration).updateDelayedActivation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
