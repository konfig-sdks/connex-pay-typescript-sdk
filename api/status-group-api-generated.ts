/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { StatusGroup3DsAuthenticationStatusResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StatusGroupApi - axios parameter creator
 * @export
 */
export const StatusGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the 3D Secure status of an authentication when a device fingerprint and/or cardholder challenge are required for 3D Secure Authentication.
         * @summary Get 3DS Status Group
         * @param {string} guid Replace the original guid value with the guid that was returned with the status response indicating a device fingerprint or cardholder challenge is required to complete 3DS authentication..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _3dsAuthenticationStatus: async (guid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('_3dsAuthenticationStatus', 'guid', guid)
            const localVarPath = `/api/v1/3ds/{GUID}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid !== undefined ? guid : `-guid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/3ds/{GUID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusGroupApi - functional programming interface
 * @export
 */
export const StatusGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatusGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns the 3D Secure status of an authentication when a device fingerprint and/or cardholder challenge are required for 3D Secure Authentication.
         * @summary Get 3DS Status Group
         * @param {StatusGroupApi3dsAuthenticationStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _3dsAuthenticationStatus(requestParameters: StatusGroupApi3dsAuthenticationStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusGroup3DsAuthenticationStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._3dsAuthenticationStatus(requestParameters.guid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatusGroupApi - factory interface
 * @export
 */
export const StatusGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatusGroupApiFp(configuration)
    return {
        /**
         * This endpoint returns the 3D Secure status of an authentication when a device fingerprint and/or cardholder challenge are required for 3D Secure Authentication.
         * @summary Get 3DS Status Group
         * @param {StatusGroupApi3dsAuthenticationStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _3dsAuthenticationStatus(requestParameters: StatusGroupApi3dsAuthenticationStatusRequest, options?: AxiosRequestConfig): AxiosPromise<StatusGroup3DsAuthenticationStatusResponse> {
            return localVarFp._3dsAuthenticationStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _3dsAuthenticationStatus operation in StatusGroupApi.
 * @export
 * @interface StatusGroupApi3dsAuthenticationStatusRequest
 */
export type StatusGroupApi3dsAuthenticationStatusRequest = {
    
    /**
    * Replace the original guid value with the guid that was returned with the status response indicating a device fingerprint or cardholder challenge is required to complete 3DS authentication..
    * @type {string}
    * @memberof StatusGroupApi3dsAuthenticationStatus
    */
    readonly guid: string
    
}

/**
 * StatusGroupApiGenerated - object-oriented interface
 * @export
 * @class StatusGroupApiGenerated
 * @extends {BaseAPI}
 */
export class StatusGroupApiGenerated extends BaseAPI {
    /**
     * This endpoint returns the 3D Secure status of an authentication when a device fingerprint and/or cardholder challenge are required for 3D Secure Authentication.
     * @summary Get 3DS Status Group
     * @param {StatusGroupApi3dsAuthenticationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusGroupApiGenerated
     */
    public _3dsAuthenticationStatus(requestParameters: StatusGroupApi3dsAuthenticationStatusRequest, options?: AxiosRequestConfig) {
        return StatusGroupApiFp(this.configuration)._3dsAuthenticationStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
