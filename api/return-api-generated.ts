/* tslint:disable */
/* eslint-disable */
/*
ConnexPay Reporting API

REST API for retrieving reporting data. Currently Daily Accounting data only.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReturnItemRequestRequest } from '../models';
// @ts-ignore
import { ReturnItemRequestRequestReturnRetryCard } from '../models';
// @ts-ignore
import { ReturnItemRequestResponse } from '../models';
// @ts-ignore
import { ReturnSearchSaleReturnsRequest } from '../models';
// @ts-ignore
import { ReturnSearchSaleReturnsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReturnApi - axios parameter creator
 * @export
 */
export const ReturnApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return
         * @param {ReturnItemRequestRequest} [returnItemRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRequest: async (returnItemRequestRequest?: ReturnItemRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/returns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: returnItemRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/returns',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(returnItemRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches sale returns.
         * @summary Search returns
         * @param {string} exportable True or False. It means if you want results exportable to CSV.
         * @param {number} pageNumber Int. Number of page of the results. Default is 1 (Page size default is 500).
         * @param {string} pageSize Int. Size of each page of the results. Default is 500.
         * @param {ReturnSearchSaleReturnsRequest} [returnSearchSaleReturnsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSaleReturns: async (exportable: string, pageNumber: number, pageSize: string, returnSearchSaleReturnsRequest?: ReturnSearchSaleReturnsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportable' is not null or undefined
            assertParamExists('searchSaleReturns', 'exportable', exportable)
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('searchSaleReturns', 'pageNumber', pageNumber)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('searchSaleReturns', 'pageSize', pageSize)
            const localVarPath = `/api/v1/Search/Returns/{exportable}/{pageNumber}/{pageSize}`
                .replace(`{${"Exportable"}}`, encodeURIComponent(String(exportable !== undefined ? exportable : `-Exportable-`)))
                .replace(`{${"PageNumber"}}`, encodeURIComponent(String(pageNumber !== undefined ? pageNumber : `-PageNumber-`)))
                .replace(`{${"PageSize"}}`, encodeURIComponent(String(pageSize !== undefined ? pageSize : `-PageSize-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: returnSearchSaleReturnsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/Search/Returns/{exportable}/{pageNumber}/{pageSize}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(returnSearchSaleReturnsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnApi - functional programming interface
 * @export
 */
export const ReturnApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Return
         * @param {ReturnApiItemRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemRequest(requestParameters: ReturnApiItemRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReturnItemRequestResponse>> {
            const returnItemRequestRequest: ReturnItemRequestRequest = {
                DeviceGuid: requestParameters.DeviceGuid,
                SaleGuid: requestParameters.SaleGuid,
                SaleReferenceNumber: requestParameters.SaleReferenceNumber,
                Amount: requestParameters.Amount,
                SequenceNumber: requestParameters.SequenceNumber,
                ReturnRetryCard: requestParameters.ReturnRetryCard
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemRequest(returnItemRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches sale returns.
         * @summary Search returns
         * @param {ReturnApiSearchSaleReturnsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSaleReturns(requestParameters: ReturnApiSearchSaleReturnsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReturnSearchSaleReturnsResponse>> {
            const returnSearchSaleReturnsRequest: ReturnSearchSaleReturnsRequest = {
                MerchantGuid: requestParameters.MerchantGuid,
                AmountFrom: requestParameters.AmountFrom,
                AmountTo: requestParameters.AmountTo,
                CardHolderName: requestParameters.CardHolderName,
                Status: requestParameters.Status,
                TimeStampFrom: requestParameters.TimeStampFrom,
                TimeStampTo: requestParameters.TimeStampTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSaleReturns(requestParameters.exportable, requestParameters.pageNumber, requestParameters.pageSize, returnSearchSaleReturnsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnApi - factory interface
 * @export
 */
export const ReturnApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnApiFp(configuration)
    return {
        /**
         * 
         * @summary Return
         * @param {ReturnApiItemRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRequest(requestParameters: ReturnApiItemRequestRequest, options?: AxiosRequestConfig): AxiosPromise<ReturnItemRequestResponse> {
            return localVarFp.itemRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches sale returns.
         * @summary Search returns
         * @param {ReturnApiSearchSaleReturnsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSaleReturns(requestParameters: ReturnApiSearchSaleReturnsRequest, options?: AxiosRequestConfig): AxiosPromise<ReturnSearchSaleReturnsResponse> {
            return localVarFp.searchSaleReturns(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for itemRequest operation in ReturnApi.
 * @export
 * @interface ReturnApiItemRequestRequest
 */
export type ReturnApiItemRequestRequest = {
    
} & ReturnItemRequestRequest

/**
 * Request parameters for searchSaleReturns operation in ReturnApi.
 * @export
 * @interface ReturnApiSearchSaleReturnsRequest
 */
export type ReturnApiSearchSaleReturnsRequest = {
    
    /**
    * True or False. It means if you want results exportable to CSV.
    * @type {string}
    * @memberof ReturnApiSearchSaleReturns
    */
    readonly exportable: string
    
    /**
    * Int. Number of page of the results. Default is 1 (Page size default is 500).
    * @type {number}
    * @memberof ReturnApiSearchSaleReturns
    */
    readonly pageNumber: number
    
    /**
    * Int. Size of each page of the results. Default is 500.
    * @type {string}
    * @memberof ReturnApiSearchSaleReturns
    */
    readonly pageSize: string
    
} & ReturnSearchSaleReturnsRequest

/**
 * ReturnApiGenerated - object-oriented interface
 * @export
 * @class ReturnApiGenerated
 * @extends {BaseAPI}
 */
export class ReturnApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Return
     * @param {ReturnApiItemRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiGenerated
     */
    public itemRequest(requestParameters: ReturnApiItemRequestRequest, options?: AxiosRequestConfig) {
        return ReturnApiFp(this.configuration).itemRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches sale returns.
     * @summary Search returns
     * @param {ReturnApiSearchSaleReturnsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiGenerated
     */
    public searchSaleReturns(requestParameters: ReturnApiSearchSaleReturnsRequest, options?: AxiosRequestConfig) {
        return ReturnApiFp(this.configuration).searchSaleReturns(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
